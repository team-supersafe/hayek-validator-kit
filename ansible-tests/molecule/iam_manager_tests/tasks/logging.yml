---

# ========================================
# RBAC VERIFICATION - DETAILED COMMAND LOGGING
# ========================================

- name: Get current timestamp for logging
  ansible.builtin.setup:
    filter: ansible_date_time

# Ensure reports_dir variable is set for consistency
- name: Set report directory variable
  ansible.builtin.set_fact:
    reports_dir: "/test-reports"

- name: Create detailed command execution log
  ansible.builtin.set_fact:
    detailed_execution_log: |
      {%- set log_lines = [] -%}
      {%- set _ = log_lines.append("========================================") -%}
      {%- set _ = log_lines.append("DETAILED COMMAND EXECUTION LOG") -%}
      {%- set _ = log_lines.append("Timestamp: " + ansible_date_time.iso8601) -%}
      {%- set _ = log_lines.append("Total Commands Executed: " + (execution_results.results | length | string)) -%}
      {%- set _ = log_lines.append("========================================") -%}
      {%- set _ = log_lines.append("") -%}

      {%- for i in range(execution_results.results | length) -%}
        {%- set result = execution_results.results[i] -%}
        {%- set cmd_num = i + 1 -%}

        {%- set _ = log_lines.append("Command #" + (cmd_num | string) + ":") -%}
        {%- set _ = log_lines.append("  User: " + result.item.user + " (Role: " + result.item.role + ")") -%}
        {%- set _ = log_lines.append("  Command: " + result.item.cmd | replace('{{ validator_service }}', validator_service) | replace('{{ validator_log_file }}', validator_log_file) | replace('{{ solana_user }}', solana_user)) -%}
        {%- set _ = log_lines.append("  Expected: " + result.item.expect) -%}
        {%- set _ = log_lines.append("  Type: " + result.item.type) -%}
        {%- set _ = log_lines.append("  Exit Code: " + (result.rc | string)) -%}
        {%- if result.stdout -%}
          {%- if result.stdout | length > 100 -%}
            {%- set stdout_clean = result.stdout | regex_replace('={50,}[\\s\\S]*?={50,}', '', multiline=True) | regex_replace('Welcome,.*?!', '') | regex_replace('To change your password.*?convenience\\.', '') | regex_replace('To check your current.*?permissions\\.txt', '') | regex_replace('\\s+', ' ') | trim -%}
            {%- if stdout_clean | length > 0 -%}
              {%- set _ = log_lines.append("  STDOUT: " + stdout_clean | truncate(200)) -%}
            {%- else -%}
              {%- set _ = log_lines.append("  STDOUT: [WELCOME MESSAGE FILTERED]") -%}
            {%- endif -%}
          {%- else -%}
            {%- set _ = log_lines.append("  STDOUT: " + result.stdout | truncate(200)) -%}
          {%- endif -%}
        {%- endif -%}
        {%- if result.stderr -%}
          {%- set _ = log_lines.append("  STDERR: " + result.stderr | truncate(200)) -%}
        {%- endif -%}

        {%- if result.rc == 0 and result.item.expect == 'success' -%}
          {%- set _ = log_lines.append("  Status: ‚úÖ SUCCESS (as expected)") -%}
        {%- elif result.rc != 0 and result.item.expect == 'block' -%}
          {%- set _ = log_lines.append("  Status: üõ°Ô∏è BLOCKED (as expected)") -%}
        {%- elif result.rc == 0 and result.item.expect == 'block' -%}
          {%- set _ = log_lines.append("  Status: ‚ö†Ô∏è SECURITY VIOLATION (should be blocked!)") -%}
        {%- elif result.rc != 0 and result.item.expect == 'success' -%}
          {%- set _ = log_lines.append("  Status: ‚ùå FAILED (unexpected failure)") -%}
        {%- else -%}
          {%- set _ = log_lines.append("  Status: üîç UNKNOWN") -%}
        {%- endif -%}

        {%- set _ = log_lines.append("  Duration: " + result.delta) -%}
        {%- set _ = log_lines.append("  Started: " + result.start) -%}
        {%- set _ = log_lines.append("  Ended: " + result.end) -%}
        {%- set _ = log_lines.append("") -%}
      {%- endfor -%}

      {%- set _ = log_lines.append("========================================") -%}
      {%- set _ = log_lines.append("SUMMARY BY COMMAND TYPE:") -%}
      {%- set _ = log_lines.append("========================================") -%}

      {%- set safe_commands = [] -%}
      {%- set restricted_commands = [] -%}
      {%- set operator_commands = [] -%}
      {%- set admin_commands = [] -%}

      {%- for result in execution_results.results -%}
        {%- if result.item.type == 'safe' -%}
          {%- set _ = safe_commands.append(result.item.cmd) -%}
        {%- elif result.item.type == 'restricted' -%}
          {%- set _ = restricted_commands.append(result.item.cmd) -%}
        {%- elif result.item.type == 'operator' -%}
          {%- set _ = operator_commands.append(result.item.cmd) -%}
        {%- elif result.item.type == 'admin' -%}
          {%- set _ = admin_commands.append(result.item.cmd) -%}
        {%- endif -%}
      {%- endfor -%}

      {%- set _ = log_lines.append("üü¢ Safe Commands (basic): " + (safe_commands | length | string)) -%}
      {%- set _ = log_lines.append("üî¥ Restricted Commands (should block): " + (restricted_commands | length | string)) -%}
      {%- set _ = log_lines.append("üü† Operator Commands (validator ops): " + (operator_commands | length | string)) -%}
      {%- set _ = log_lines.append("üü° Admin Commands (privileged): " + (admin_commands | length | string)) -%}
      {%- set _ = log_lines.append("üìä Total: " + (((safe_commands | length) + (restricted_commands | length) + (operator_commands | length) + (admin_commands | length)) | string)) -%}
      {%- set _ = log_lines.append("") -%}

      {%- set _ = log_lines.append("========================================") -%}
      {%- set _ = log_lines.append("SUMMARY BY USER:") -%}
      {%- set _ = log_lines.append("========================================") -%}

      {%- set users_summary = {} -%}
      {%- for result in execution_results.results -%}
        {%- if result.item.user not in users_summary -%}
          {%- set _ = users_summary.update({result.item.user: {'role': result.item.role, 'count': 0}}) -%}
        {%- endif -%}
        {%- set _ = users_summary[result.item.user].update({'count': users_summary[result.item.user].count + 1}) -%}
      {%- endfor -%}

      {%- for user, info in users_summary.items() -%}
        {%- set _ = log_lines.append("üë§ " + user + " (" + info.role + "): " + (info.count | string) + " commands") -%}
      {%- endfor -%}

      {%- set _ = log_lines.append("") -%}
      {%- set _ = log_lines.append("========================================") -%}
      {%- set _ = log_lines.append("END OF EXECUTION LOG") -%}
      {%- set _ = log_lines.append("========================================") -%}

      {{ log_lines }}



- name: Save detailed execution log to file
  ansible.builtin.copy:
    content: "{{ detailed_execution_log | join('\n') }}"
    dest: "{{ reports_dir }}/rbac_execution_log_{{ ansible_date_time.epoch }}.txt"
    mode: '0644'
    force: false  # Don't overwrite if file exists
  delegate_to: localhost
  become: false
  register: log_file_creation
  ignore_errors: true

- name: Show log file location
  ansible.builtin.debug:
    msg: 
      - "üìÑ Log Status: {{ 'Created new log file' if (log_file_creation.changed | default(false)) else 'Log file already exists' }}"
      - "üìÅ Location: /test-reports/rbac_execution_log_{{ ansible_date_time.epoch }}.txt"

# ========================================
# LOGGING VERIFICATION REPORTS
# ========================================

- name: Display Command Execution Logging Summary
  ansible.builtin.debug:
    msg:
      - "============================================================================="
      - "üìù COMMAND EXECUTION LOGGING VERIFICATION REPORT"
      - "============================================================================="
      - "üìã LOGGING COMPONENTS STATUS:"
      - ""
      - "‚úÖ Timestamp Collection:"
      - "   ‚Ä¢ Current timestamp captured: {{ ansible_date_time.iso8601 }}"
      - "   ‚Ä¢ Log timestamp format: ISO8601 standard"
      - ""
      - "‚úÖ Command Execution Log:"
      - "   ‚Ä¢ Total commands logged: {{ execution_results.results | length }}"
      - "   ‚Ä¢ Log format: Structured with user, role, command, results"
      - "   ‚Ä¢ Status tracking: SUCCESS, BLOCKED, VIOLATIONS, FAILURES"
      - ""
      - "‚úÖ Command Type Categorization:"
      - "   ‚Ä¢ Safe commands: {{ execution_results.results | selectattr('item.type', 'equalto', 'safe') | list | length }}"
      - "   ‚Ä¢ Restricted commands: {{ execution_results.results | selectattr('item.type', 'equalto', 'restricted') | list | length }}"
      - "   ‚Ä¢ Operator commands: {{ execution_results.results | selectattr('item.type', 'equalto', 'operator') | list | length }}"
      - "   ‚Ä¢ Admin commands: {{ execution_results.results | selectattr('item.type', 'equalto', 'admin') | list | length }}"
      - ""
      - "‚úÖ User Summary Tracking:"
      - "   ‚Ä¢ Users monitored: {{ execution_results.results | map(attribute='item.user') | unique | list | length }}"
      - "   ‚Ä¢ Role-based categorization: ‚úì"
      - "   ‚Ä¢ Command count per user: ‚úì"
      - ""
      - "‚úÖ Log File Generation:"
      - "   ‚Ä¢ Log file created: /new-metal-box/rbac_execution_log_{{ ansible_date_time.epoch }}.txt"
      - "   ‚Ä¢ File permissions: 0644"
      - "   ‚Ä¢ Content format: Structured text with timestamps"
      - ""
      - "üéØ LOGGING VERIFICATION: ALL COMPONENTS WORKING ‚úÖ"
      - "============================================================================="

- name: Display Command Execution Analysis
  ansible.builtin.debug:
    msg:
      - "============================================================================="
      - "üìä COMMAND EXECUTION ANALYSIS REPORT"
      - "============================================================================="
      - "üîç EXECUTION RESULTS BREAKDOWN:"
      - ""
      - "‚úÖ Success Results:"
      - "   ‚Ä¢ Commands executed successfully: {{ execution_results.results | selectattr('rc', 'equalto', 0) | selectattr('item.expect', 'equalto', 'success') | list | length }}"
      - "   ‚Ä¢ Expected successes achieved: ‚úì"
      - ""
      - "üõ°Ô∏è Security Blocks:"
      - "   ‚Ä¢ Commands properly blocked: {{ execution_results.results | selectattr('rc', 'ne', 0) | selectattr('item.expect', 'equalto', 'block') | list | length }}"
      - "   ‚Ä¢ Security measures working: ‚úì"
      - ""
      - "‚ö†Ô∏è Security Violations (if any):"
      - "   ‚Ä¢ Commands that should be blocked but succeeded: {{ execution_results.results | selectattr('rc', 'equalto', 0) | selectattr('item.expect', 'equalto', 'block') | list | length }}"
      - "   ‚Ä¢ Critical security issues: {{ '‚ùå FOUND' if (execution_results.results | selectattr('rc', 'equalto', 0) | selectattr('item.expect', 'equalto', 'block') | list | length > 0) else '‚úÖ NONE' }}"
      - ""
      - "‚ùå Unexpected Failures:"
      - "   ‚Ä¢ Commands that should succeed but failed: {{ execution_results.results | selectattr('rc', 'ne', 0) | selectattr('item.expect', 'equalto', 'success') | list | length }}"
      - "   ‚Ä¢ System functionality issues: {{ '‚ö†Ô∏è FOUND' if (execution_results.results | selectattr('rc', 'ne', 0) | selectattr('item.expect', 'equalto', 'success') | list | length > 0) else '‚úÖ NONE' }}"
      - ""
      - "üìà Performance Metrics:"
      - "   ‚Ä¢ Average command duration: {{ (execution_results.results | map(attribute='delta') | map('regex_replace', '^0:00:0?(.*)$', '\\1') | map('float') | sum / execution_results.results | length) | round(3) }}s"
      - "   ‚Ä¢ Total execution time: {{ execution_results.results | map(attribute='delta') | map('regex_replace', '^0:00:0?(.*)$', '\\1') | map('float') | sum | round(3) }}s"
      - ""
      - "üéØ ANALYSIS STATUS: {{ 'PASSED ‚úÖ' if ((execution_results.results | selectattr('rc', 'equalto', 0) | selectattr('item.expect', 'equalto', 'block') | list | length == 0) and (execution_results.results | selectattr('rc', 'ne', 0) | selectattr('item.expect', 'equalto', 'success') | list | length == 0)) else 'ISSUES DETECTED ‚ùå' }}"
      - "============================================================================="

- name: Display Detailed User Activity Report  
  ansible.builtin.debug:
    msg:
      - "============================================================================="
      - "üë• DETAILED USER ACTIVITY REPORT"
      - "============================================================================="
      - "üìã PER-USER COMMAND EXECUTION:"
      - ""
  loop: "{{ execution_results.results | map(attribute='item.user') | unique | list }}"
  loop_control:
    loop_var: user_item

- name: Display User Activity Details
  ansible.builtin.debug:
    msg:
      - "üîπ USER: {{ user_item }}"
      - "   ‚Ä¢ Role: {{ (execution_results.results | selectattr('item.user', 'equalto', user_item) | first).item.role }}"
      - "   ‚Ä¢ Commands executed: {{ execution_results.results | selectattr('item.user', 'equalto', user_item) | list | length }}"
      - "   ‚Ä¢ Successful commands: {{ execution_results.results | selectattr('item.user', 'equalto', user_item) | selectattr('rc', 'equalto', 0) | selectattr('item.expect', 'equalto', 'success') | list | length }}"
      - "   ‚Ä¢ Blocked commands: {{ execution_results.results | selectattr('item.user', 'equalto', user_item) | selectattr('rc', 'ne', 0) | selectattr('item.expect', 'equalto', 'block') | list | length }}"
      - "   ‚Ä¢ Security violations: {{ execution_results.results | selectattr('item.user', 'equalto', user_item) | selectattr('rc', 'equalto', 0) | selectattr('item.expect', 'equalto', 'block') | list | length }}"
      - "   ‚Ä¢ Unexpected failures: {{ execution_results.results | selectattr('item.user', 'equalto', user_item) | selectattr('rc', 'ne', 0) | selectattr('item.expect', 'equalto', 'success') | list | length }}"
      - "   ‚Ä¢ Status: {{ '‚úÖ CLEAN' if ((execution_results.results | selectattr('item.user', 'equalto', user_item) | selectattr('rc', 'equalto', 0) | selectattr('item.expect', 'equalto', 'block') | list | length == 0) and (execution_results.results | selectattr('item.user', 'equalto', user_item) | selectattr('rc', 'ne', 0) | selectattr('item.expect', 'equalto', 'success') | list | length == 0)) else '‚ö†Ô∏è ISSUES' }}"
      - ""
  loop: "{{ execution_results.results | map(attribute='item.user') | unique | list }}"
  loop_control:
    loop_var: user_item

- name: Display User Activity Summary
  ansible.builtin.debug:
    msg:
      - "üéØ USER ACTIVITY ANALYSIS: {{ 'ALL USERS OPERATING CORRECTLY ‚úÖ' if (execution_results.results | selectattr('rc', 'equalto', 0) | selectattr('item.expect', 'equalto', 'block') | list | length == 0) else 'SECURITY ISSUES DETECTED ‚ùå' }}"
      - "============================================================================="
