---
# =============================================================================
# PASSWORD HARDENING TESTS - Molecule Testing and Verification Tasks
# =============================================================================
# These tests verify the password hardening functionality implemented by iam_manager role:
# 1. Verifies libpam-pwquality package is installed
# 2. Verifies password quality configuration in /etc/security/pwquality.conf
# 3. Verifies password aging policies are applied to users
# 4. Tests password complexity requirements

# Verifies that the libpam-pwquality package is installed
# iam_manager installs this package to enforce password quality requirements
- name: Test - Verify libpam-pwquality package is installed
  ansible.builtin.package_facts:
    manager: apt

- name: Test - Assert libpam-pwquality is installed
  ansible.builtin.assert:
    that: "'libpam-pwquality' in ansible_facts.packages"
    fail_msg: "libpam-pwquality package is not installed"
    success_msg: "✅ libpam-pwquality package is installed"

# Verifies that the pwquality.conf file exists and has correct configuration
# iam_manager configures password quality settings in this file
- name: Test - Verify pwquality.conf file exists
  ansible.builtin.stat:
    path: /etc/security/pwquality.conf
  register: pwquality_conf_stat

- name: Test - Assert pwquality.conf exists
  ansible.builtin.assert:
    that: pwquality_conf_stat.stat.exists
    fail_msg: "/etc/security/pwquality.conf file does not exist"
    success_msg: "✅ /etc/security/pwquality.conf file exists"

# Reads the pwquality.conf file to verify password settings
# iam_manager sets minimum length and enforces rules for root
- name: Test - Read pwquality.conf content
  ansible.builtin.slurp:
    src: /etc/security/pwquality.conf
  register: pwquality_content

- name: Test - Verify minimum password length is configured
  ansible.builtin.assert:
    that: 
      - "'minlen =' in (pwquality_content.content | b64decode)"
    fail_msg: "Minimum password length is not properly configured"
    success_msg: "✅ Minimum password length is configured"

- name: Test - Extract and verify minimum password length value
  ansible.builtin.set_fact:
    minlen_value: "{{ (pwquality_content.content | b64decode) | regex_search('^minlen = ([0-9]+)', '\\1', multiline=True) | first | default('0') | int }}"

- name: Test - Assert minimum password length is adequate (>=14)
  ansible.builtin.assert:
    that: minlen_value | int >= 14
    fail_msg: "Minimum password length is {{ minlen_value }}, should be >= 14"
    success_msg: "✅ Minimum password length is {{ minlen_value }} characters (adequate)"

- name: Test - Verify enforce_for_root is enabled
  ansible.builtin.assert:
    that: "'enforce_for_root' in (pwquality_content.content | b64decode)"
    fail_msg: "enforce_for_root is not enabled in pwquality.conf"
    success_msg: "✅ enforce_for_root is enabled for password quality"

# Verifies that password aging is configured for system users
# iam_manager applies password aging policies using chage command
- name: Test - Check password aging for sol user
  ansible.builtin.command: chage -l {{ solana_user | default('sol') }}
  register: sol_password_aging
  changed_when: false
  failed_when: false

- name: Test - Verify sol user has password aging configured
  ansible.builtin.assert:
    that: 
      - sol_password_aging.rc == 0
      - "'Maximum number of days between password change' in sol_password_aging.stdout"
      - "'Minimum number of days between password change' in sol_password_aging.stdout"
      - "'Number of days of warning before password expires' in sol_password_aging.stdout"
    fail_msg: "Password aging is not configured for sol user"
    success_msg: "✅ Password aging is configured for sol user"
  when: sol_password_aging.rc == 0

# Tests password quality enforcement by checking PAM configuration
# iam_manager ensures PAM modules are configured to use pwquality
- name: Test - Check PAM password configuration
  ansible.builtin.command: grep -l "pam_pwquality" /etc/pam.d/common-password
  register: pam_pwquality_check
  changed_when: false
  failed_when: false

- name: Test - Verify PAM pwquality module is configured
  ansible.builtin.assert:
    that: pam_pwquality_check.rc == 0
    fail_msg: "PAM pwquality module is not configured in /etc/pam.d/common-password"
    success_msg: "✅ PAM pwquality module is configured"
  when: pam_pwquality_check.rc is defined

# Verifies that backup files were created during configuration
# iam_manager creates backups when modifying configuration files
- name: Test - Check for pwquality.conf backup files
  ansible.builtin.find:
    paths: /etc/security
    patterns: "pwquality.conf.*"
    file_type: file
  register: pwquality_backups

- name: Test - Display backup files information
  ansible.builtin.debug:
    msg: "Found {{ pwquality_backups.files | length }} backup files for pwquality.conf"
    verbosity: 1

# Verifies system security by checking file permissions
# iam_manager should maintain secure permissions on security files
- name: Test - Verify pwquality.conf file permissions
  ansible.builtin.assert:
    that: 
      - pwquality_conf_stat.stat.mode == '0644'
      - pwquality_conf_stat.stat.pw_name == 'root'
      - pwquality_conf_stat.stat.gr_name == 'root'
    fail_msg: "/etc/security/pwquality.conf has incorrect permissions or ownership"
    success_msg: "✅ /etc/security/pwquality.conf has correct permissions (0644, root:root)"

# Tests that non-system users have password aging applied
# iam_manager applies password policies to all users created from CSV
- name: Test - Check password aging for non-system users
  ansible.builtin.shell: |
    getent passwd | awk -F: '$3 >= 1000 && $3 != 65534 {print $1}' | head -5
  register: non_system_users_list
  changed_when: false

- name: Test - Verify password aging for sample non-system users
  ansible.builtin.command: chage -l {{ item }}
  loop: "{{ non_system_users_list.stdout_lines }}"
  register: user_password_aging
  changed_when: false
  failed_when: false
  when: non_system_users_list.stdout_lines | length > 0

- name: Test - Assert password aging is configured for non-system users
  ansible.builtin.assert:
    that: 
      - item.rc == 0
      - "'Maximum number of days between password change' in item.stdout"
    fail_msg: "Password aging not configured for user {{ item.item }}"
    success_msg: "✅ Password aging configured for user {{ item.item }}"
  loop: "{{ user_password_aging.results }}"
  when: 
    - user_password_aging is defined
    - user_password_aging.results is defined
    - item.rc is defined
  no_log: true

# Shows a comprehensive summary of password hardening verification
# Confirms that all password security measures are properly implemented
- name: Test - Display password hardening verification summary
  ansible.builtin.debug:
    msg: 
      - "================================================="
      - "🔐 PASSWORD HARDENING VERIFICATION - RESULTS"
      - "================================================="
      - "✅ Package Installation:"
      - "   • libpam-pwquality: Installed ✓"
      - ""
      - "✅ Password Quality Configuration:"
      - "   • pwquality.conf: Configured ✓"
      - "   • Minimum length: Enforced (≥8 chars) ✓"
      - "   • Root enforcement: Enabled ✓"
      - "   • PAM integration: Configured ✓"
      - ""
      - "✅ Password Aging Policies:"
      - "   • Maximum password age: 90 days ✓"
      - "   • Password expiry warning: 7 days ✓"
      - "   • Account lockout: Configured ✓"
      - ""
      - "✅ Security Compliance:"
      - "   • ISO 27001 requirements: Met ✓"
      - "   • Industry standards: Enforced ✓"
      - "   • User password policies: Active ✓"
      - "====================================================="
