---
# Setup users for a monitoring server
# --------------------
# Usage:
# ------
# Run from /ansible directory:
#
#
# ansible-playbook playbooks/pb_setup_users_monitor.yml \
#   -i solana_new_metal_box.yml \
#   -e "target_host=new-metal-box" \
#   -e "ansible_user=ubuntu" \
#   -e "csv_file=iam_setup_monitor.csv"  # REQUIRED: specify the CSV filename for monitor server

- name: Setup server users
  hosts: "{{ target_host }}"
  user: "{{ ansible_user }}"
  become: true
  vars_files:
    - ../roles/iam_manager/vars/main.yml
  pre_tasks:
    # Read CSV to validate groups
    - name: Read CSV to validate monitor groups
      community.general.read_csv:
        path: "{{ users_file }}"
        key: user
      register: users_csv_precheck
      delegate_to: localhost
      become: false

    # Validate that only sysadmin group is present (no validator groups)
    - name: Ensure only sysadmin group is present in CSV for monitor server
      ansible.builtin.assert:
        that:
          - item.value.group_a | default('') == '' or item.value.group_a == rbac_roles.sysadmin
          - item.value.group_b | default('') == '' or item.value.group_b == rbac_roles.sysadmin
          - item.value.group_c | default('') == '' or item.value.group_c == rbac_roles.sysadmin
        fail_msg: |
          ❌ User {{ item.key }} has non-sysadmin groups for monitor server.
          When setting up a monitoring server, only 'sysadmin' group is permitted.
          User {{ item.key }} groups: {{ item.value.group_a | default('') }}, {{ item.value.group_b | default('') }}, {{ item.value.group_c | default('') }}
        success_msg: "✅ User {{ item.key }} groups validated for monitor mode (sysadmin only)"
      loop: "{{ users_csv_precheck.dict | dict2items }}"
      delegate_to: localhost
      become: false
      run_once: true

    # Gather system facts to get server information
    - name: Gather facts
      ansible.builtin.setup:

    # Get IP information from ipinfo.io
    - name: Get IP information from ipinfo.io
      ansible.builtin.uri:
        url: "https://ipinfo.io/{{ ansible_default_ipv4.address }}/json"
        method: GET
      register: ip_info
      delegate_to: localhost
      run_once: true

    # Show server IP and location information for confirmation
    - name: Show server IP and location for confirmation
      ansible.builtin.pause:
        prompt: |
          IMPORTANT: You are about to run this playbook on the server with IP: {{ ansible_default_ipv4.address }}

          Location Information:
          - City: {{ ip_info.json.city | default('Unknown') }}
          - Country: {{ ip_info.json.country | default('Unknown') }}
          - Organization: {{ ip_info.json.org | default('Unknown') }}

          To continue, please type exactly this IP: {{ ansible_default_ipv4.address }}

          If you are not sure, press Ctrl+C to cancel.

          Type IP here
      register: ip_confirmation
      when: ansible_env.TERM is defined and ansible_env.TERM != "dumb"

    # Validate that the user typed the correct IP
    - name: Validate IP input
      ansible.builtin.fail:
        msg: "Incorrect IP. Please run the playbook again and type the correct IP."
      when:
        - ansible_env.TERM is defined
        - ansible_env.TERM != "dumb"
        - ip_confirmation.user_input != ansible_default_ipv4.address

  roles:
    - iam_manager

