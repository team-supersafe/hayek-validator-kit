---
# Setup users for a Solana validator server
# --------------------
# Usage:
# ------
# Run from /ansible directory:
#
#
# ansible-playbook playbooks/pb_setup_users_validator.yml \
#   -i solana_new_metal_box.yml \
#   -e "target_host=new-metal-box" \
#   -e "ansible_user=ubuntu" \
#   -e "csv_file=iam_setup.csv"  # REQUIRED: specify the CSV filename

- name: Setup server users
  hosts: "{{ target_host }}"
  user: "{{ ansible_user }}"
  become: true
  vars_files:
    - ../roles/iam_manager/vars/main.yml
  pre_tasks:
    # Check if 'sol' user exists in CSV
    - name: Read CSV to check for sol user
      community.general.read_csv:
        path: "{{ users_file }}"
        key: user
      register: users_csv_precheck
      delegate_to: localhost
      become: false

    - name: Check if sol user exists in CSV
      ansible.builtin.set_fact:
        sol_user_in_csv: "{{ solana_user in users_csv_precheck.dict.keys() }}"

    - name: Display sol user status
      ansible.builtin.debug:
        msg: "{{ solana_user }} user {{ 'found' if sol_user_in_csv | bool else 'NOT found' }} in CSV"

    # Check for validator_operators group in CSV
    - name: Check if validator_operators group exists in CSV
      ansible.builtin.set_fact:
        has_validator_operators: >-
          {{
            users_csv_precheck.dict.values() | selectattr('group_a', 'defined') | selectattr('group_a', 'equalto', rbac_roles.operators) | list | length > 0 or
            users_csv_precheck.dict.values() | selectattr('group_b', 'defined') | selectattr('group_b', 'equalto', rbac_roles.operators) | list | length > 0 or
            users_csv_precheck.dict.values() | selectattr('group_c', 'defined') | selectattr('group_c', 'equalto', rbac_roles.operators) | list | length > 0
          }}

    - name: Display validator_operators group status
      ansible.builtin.debug:
        msg: "Validator_operators group {{ 'found' if has_validator_operators | bool else 'NOT found' }} in CSV"

    # Check for validator_viewers group in CSV
    - name: Check if validator_viewers group exists in CSV
      ansible.builtin.set_fact:
        has_validator_viewers: >-
          {{
            users_csv_precheck.dict.values() | selectattr('group_a', 'defined') | selectattr('group_a', 'equalto', rbac_roles.viewers) | list | length > 0 or
            users_csv_precheck.dict.values() | selectattr('group_b', 'defined') | selectattr('group_b', 'equalto', rbac_roles.viewers) | list | length > 0 or
            users_csv_precheck.dict.values() | selectattr('group_c', 'defined') | selectattr('group_c', 'equalto', rbac_roles.viewers) | list | length > 0
          }}

    - name: Display validator_viewers group status
      ansible.builtin.debug:
        msg: "Validator_viewers group {{ 'found' if has_validator_viewers | bool else 'NOT found' }} in CSV"

    # Validate that 'sol' user exists in CSV
    - name: Ensure solana user exists in CSV for validator role
      ansible.builtin.assert:
        that:
          - sol_user_in_csv | bool
        fail_msg: |
          ❌ Security requirement: The '{{ solana_user }}' user must exist in the CSV.
          The CSV must contain a user named '{{ solana_user }}' when setting up a validator server.
          This user is required to run the Solana validator service.
        success_msg: "✅ Security check passed: '{{ solana_user }}' user found in CSV"
      delegate_to: localhost
      become: false
      run_once: true

    # Validate that at least one validator_operators user exists
    - name: Ensure at least one validator_operators user exists for validator role
      ansible.builtin.assert:
        that:
          - has_validator_operators | bool
        fail_msg: |
          ❌ Security requirement: At least one user with 'validator_operators' role must exist.
          The CSV must contain at least one user with the group 'validator_operators' when setting up a validator server.
        success_msg: "✅ Security check passed: At least one validator_operators user found"
      delegate_to: localhost
      become: false
      run_once: true

    # Gather system facts to get server information
    - name: Gather facts
      ansible.builtin.setup:

    # Get IP information from ipinfo.io
    - name: Get IP information from ipinfo.io
      ansible.builtin.uri:
        url: "https://ipinfo.io/{{ ansible_default_ipv4.address }}/json"
        method: GET
      register: ip_info
      delegate_to: localhost
      run_once: true

    # Show server IP and location information for confirmation
    - name: Show server IP and location for confirmation
      ansible.builtin.pause:
        prompt: |
          IMPORTANT: You are about to run this playbook on the server with IP: {{ ansible_default_ipv4.address }}

          Location Information:
          - City: {{ ip_info.json.city | default('Unknown') }}
          - Country: {{ ip_info.json.country | default('Unknown') }}
          - Organization: {{ ip_info.json.org | default('Unknown') }}

          To continue, please type exactly this IP: {{ ansible_default_ipv4.address }}

          If you are not sure, press Ctrl+C to cancel.

          Type IP here
      register: ip_confirmation
      when: ansible_env.TERM is defined and ansible_env.TERM != "dumb"

    # Validate that the user typed the correct IP
    - name: Validate IP input
      ansible.builtin.fail:
        msg: "Incorrect IP. Please run the playbook again and type the correct IP."
      when:
        - ansible_env.TERM is defined
        - ansible_env.TERM != "dumb"
        - ip_confirmation.user_input != ansible_default_ipv4.address

  roles:
    - iam_manager

