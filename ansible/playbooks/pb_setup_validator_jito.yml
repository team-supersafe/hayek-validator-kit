---
# Jito Validator Setup
# -------------------
# Sets up a Solana validator with Jito client for MEV capabilities.
#
# Usage:
# ------
# Run from /ansible directory:
#
# syntax check
# ansible-playbook playbooks/pb_setup_validator_jito.yml --syntax-check -e "target_host=host-charlie" --limit host-charlie
#
# ansible-playbook playbooks/pb_setup_validator_jito.yml \
#   --limit host-charlie \
#   -e "validator_name=penny" \
#   -e "target_host=host-charlie" \
#   -e "solana_cluster=localnet" \
#   -e "jito_version=2.2.14" \
#   -e "jito_relayer_type=shared" \
#   -e "jito_relayer_version=0.3.1" \
#   -e "jito_force_build=true" \ # Optional: Force build Jito regardless of architecture
#   -e "force_stop_service=true" \ # Optional: Use this if a validator service is already running
#   -e "setup_voting_validator=true"  # Optional: Set to true to use primary-target-identity.json as identity.json

- name: Install Jito Client with Co-Hosted Relayer
  hosts: "{{ target_host }}"
  user: "{{ solana_user }}"
  become: false

  pre_tasks:
    - name: Assert required parameters are defined
      ansible.builtin.assert:
        that:
          - target_host is defined
          - validator_name is defined
          - solana_cluster is defined
          - jito_version is defined
          - jito_relayer_type is defined
          - jito_relayer_version is defined
        fail_msg: >
          Missing required variables.
          Must provide:
            - target_host
            - validator_name
            - solana_cluster
            - jito_version
            - jito_relayer_type
            - jito_relayer_version
          Optional:
            - force_stop_service (set to true to force stop existing validator service)
            - setup_voting_validator (set to true to use primary-target-identity.json as identity.json)
            - jito_force_build (set to true to force build Jito regardless of architecture)

    - name: Debug ansible_limit and target_host
      ansible.builtin.debug:
        msg:
          - "ansible_limit: {{ ansible_limit | default('not defined') }}"
          - "ansible_limit type: {{ ansible_limit | type_debug }}"
          - "target_host: {{ target_host }}"
          - "ansible_play_hosts: {{ ansible_play_hosts }}"

    - name: Validate that target_host matches the limited host
      ansible.builtin.assert:
        that:
          - ansible_limit is defined
          - target_host == ansible_limit
        fail_msg: >
          This playbook must be run with --limit to target exactly one host.
          Make sure you run this playbook with: --limit {{ target_host }} -e "target_host={{ target_host }}"

    - name: Validate jito_relayer_type value
      ansible.builtin.assert:
        that:
          - jito_relayer_type in ['co-hosted', 'shared']
        fail_msg: "Invalid jito_relayer_type '{{ jito_relayer_type }}'. Must be 'co-hosted' or 'shared'."

    - name: Validate solana_cluster value
      ansible.builtin.assert:
        that:
          - solana_cluster in ['localnet', 'testnet', 'mainnet']
        fail_msg: "Invalid solana_cluster '{{ solana_cluster }}'. Must be 'localnet', 'testnet', or 'mainnet'."

    - name: Validate jito_version format
      ansible.builtin.assert:
        that:
          - jito_version is regex('^[0-9]+\.[0-9]+\.[0-9]+$')
        fail_msg: "Invalid jito_version '{{ jito_version }}'. Must follow semantic versioning pattern (e.g. 1.2.3)."

    - name: Validate jito_relayer_version format
      ansible.builtin.assert:
        that:
          - jito_relayer_version is regex('^[0-9]+\.[0-9]+\.[0-9]+$')
        fail_msg: "Invalid jito_relayer_version '{{ jito_relayer_version }}'. Must follow semantic versioning pattern (e.g. 1.2.3)."

    - name: Set default value for setup_voting_validator
      ansible.builtin.set_fact:
        setup_voting_validator: "{{ setup_voting_validator | default(false) | bool }}"

    - name: Set default value for jito_force_build
      ansible.builtin.set_fact:
        jito_force_build: "{{ jito_force_build | default(false) | bool }}"

  roles:
    - role: solana_validator_jito
      vars:
        solana_cluster: "{{ solana_cluster }}"
        validator_name: "{{ validator_name }}"
        jito_version: "{{ jito_version }}"
        jito_relayer_type: "{{ jito_relayer_type }}"
        jito_relayer_version: "{{ jito_relayer_version }}"
        setup_voting_validator: "{{ setup_voting_validator }}"
        jito_force_build: "{{ jito_force_build }}"
