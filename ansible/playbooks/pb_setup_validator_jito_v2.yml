---
# Jito Validator Setup
# -------------------
# Sets up a Solana validator with Jito client for MEV capabilities.
#
# Usage:
# ------
# Run from /ansible directory:
#
# syntax check
# ansible-playbook playbooks/pb_setup_validator_jito_v2.yml \
#   -i solana_setup_host.yml \
#   --limit host-charlie \
#   --syntax-check \
#   -e "target_host=host-charlie"
#
# Example running against production host
# ansible-playbook playbooks/pb_setup_validator_jito_v2.yml \
#   -i solana_setup_host.yml \
#   --limit hyk-lat-mia \
#   -e "target_host=hyk-lat-mia" \
#   -e "validator_name=hayek-mainnet" \
#   -e "validator_type=hot-spare" \
#   -e "solana_cluster=mainnet" \
#   -e "jito_version=2.3.6" \
#   -e "jito_relayer_type=co-hosted" \
#   -e "jito_relayer_version=0.4.2" \
#   -e "build_from_source=true" \
#   -e "use_official_repo=true"
#
# Example running against localnet host (create inventory from README reference)
# ansible-playbook playbooks/pb_setup_validator_jito_v2.yml \
#   -i solana_setup_host.yml \
#   --limit host-charlie \
#   -e "target_host=host-charlie" \
#   -e "validator_name=penny" \
#   -e "validator_type=hot-spare" \
#   -e "solana_cluster=localnet" \
#   -e "jito_version=2.2.15" \
#   -e "jito_relayer_type=shared" \
#   -e "jito_relayer_version=0.3.1" \
#   -e "build_from_source=true" \ # Optional: Build from source instead of using precompiled binaries
#   -e "use_official_repo=true" \ # Optional: Use official repository instead of forked repository
#   -e "force_host_cleanup=true" \ # Optional: Use if target host is running a validator in a different cluster

- name: Install Jito Client with Co-Hosted Relayer
  hosts: "{{ target_host }}"
  user: "{{ solana_user }}"
  become: false

  pre_tasks:
    - name: Assert required parameters are defined
      ansible.builtin.assert:
        that:
          - target_host is defined
          - validator_name is defined
          - validator_type is defined
          - solana_cluster is defined
          - jito_version is defined
          - jito_relayer_type is defined
          - jito_relayer_version is defined
        fail_msg: >
          Missing required variables.
          Must provide:
            - target_host
            - validator_name
            - validator_type
            - solana_cluster
            - jito_version
            - jito_relayer_type
            - jito_relayer_version
          Optional:
            - force_host_cleanup (set to true to force stop existing validator service)


    - name: Debug ansible_limit and target_host
      ansible.builtin.debug:
        msg:
          - "ansible_limit: {{ ansible_limit | default('not defined') }}"
          - "ansible_limit type: {{ ansible_limit | type_debug }}"
          - "target_host: {{ target_host }}"
          - "ansible_play_hosts: {{ ansible_play_hosts }}"

    - name: Validate that target_host matches the limited host
      ansible.builtin.assert:
        that:
          - ansible_limit is defined
          - target_host == ansible_limit
        fail_msg: >
          This playbook must be run with --limit to target exactly one host.
          Make sure you run this playbook with: --limit {{ target_host }} -e "target_host={{ target_host }}"

    - name: Validate jito_relayer_type value
      ansible.builtin.assert:
        that:
          - jito_relayer_type in ['co-hosted', 'shared']
        fail_msg: "Invalid jito_relayer_type '{{ jito_relayer_type }}'. Must be 'co-hosted' or 'shared'."

    - name: Validate validator_type value
      ansible.builtin.assert:
        that:
          - validator_type in ['primary', 'hot-spare']
        fail_msg: "Invalid validator_type '{{ validator_type }}'. Must be 'primary' or 'hot-spare'."

    - name: Validate solana_cluster value
      ansible.builtin.assert:
        that:
          - solana_cluster in ['localnet', 'testnet', 'mainnet']
        fail_msg: "Invalid solana_cluster '{{ solana_cluster }}'. Must be 'localnet', 'testnet', or 'mainnet'."

    - name: Validate jito_version format
      ansible.builtin.assert:
        that:
          - jito_version is regex('^[0-9]+\.[0-9]+\.[0-9]+$')
        fail_msg: "Invalid jito_version '{{ jito_version }}'. Must follow semantic versioning pattern (e.g. 1.2.3)."

    - name: Validate jito_relayer_version format
      ansible.builtin.assert:
        that:
          - jito_relayer_version is regex('^[0-9]+\.[0-9]+\.[0-9]+$')
        fail_msg: "Invalid jito_relayer_version '{{ jito_relayer_version }}'. Must follow semantic versioning pattern (e.g. 1.2.3)."

  roles:
    - role: solana_validator_jito_v2
