---
# Store Encrypted Keys
# --------------------
# Stores encrypted Validator's keys in the Ansible Vault given the balidator name and a password.
#   Keys are expected to exist in folder: ~/.validator-keys/{{ validator_name }}
#   See: https://docs.hayek.fi/dev-public-goods/hayek-validator-kit/validator-conventions#the-sol-user-home
#
# Usage:
# ------
# Run from /ansible directory:
#
# ansible-playbook playbooks/pb_store_encrypted_keys.yml -e "validator_name=canopy vault_password=guacamole"

- name: Manage Ansible Vault for Validator Keypairs
  hosts: localhost
  gather_facts: false
  user: "{{ solana_user }}"
  vars:
    vault_dir: "/hayek-validator-kit/ansible/vault"
    keypair_file: "jito-relayer-block-eng.json"
    source_path: "{{ ansible_home_dir }}/.validator-keys/{{ validator_name }}/{{ keypair_file }}"
    vault_file: "{{ vault_dir }}/group_vars/all/vault.yml"
    manage_vault_script: "{{ vault_dir }}/manage_vault.sh"
    password_file: "{{ vault_dir }}/.vault_pass"

  pre_tasks:
    - name: Gather facts for localhost
      ansible.builtin.setup:
      delegate_to: localhost
      run_once: true

  tasks:
    - name: Check for required parameters 'validator_name'
      ansible.builtin.fail:
        msg: "'validator_name' parameters is required. Example: ansible-playbook -i hosts.yml playbooks/manage_vault.yml -e 'validator_name=canopy vault_password=mole'"
      when: validator_name is not defined

    - name: Check for required vault password
      ansible.builtin.fail:
        msg: "vault_password parameter is required"
      when: vault_password is not defined

    - name: Create password file
      ansible.builtin.shell: |
        echo "{{ vault_password }}" > "{{ password_file }}"
        chmod 600 "{{ password_file }}"
      delegate_to: localhost
      run_once: true

    - name: Check if source keypair file exists
      ansible.builtin.stat:
        path: "{{ source_path }}"
      register: keypair_stat
      delegate_to: localhost
      run_once: true

    - name: Fail if keypair file not found
      ansible.builtin.fail:
        msg: "Keypair file not found at {{ source_path }}"
      when: not keypair_stat.stat.exists

    - name: Check if vault file exists
      ansible.builtin.stat:
        path: "{{ vault_file }}"
      register: vault_stat

    - name: Create vault file if it doesn't exist
      ansible.builtin.shell: |
        cd "{{ vault_dir }}"
        ./manage_vault.sh update "{{ validator_name }}"
      when: not vault_stat.stat.exists
      delegate_to: localhost
      run_once: true

    - name: Update vault with keypair
      ansible.builtin.shell: |
        cd "{{ vault_dir }}"
        ./manage_vault.sh update "{{ validator_name }}"
      delegate_to: localhost
      register: vault_update

    - name: Display vault update result
      ansible.builtin.debug:
        msg: "{{ vault_update.stdout_lines }}"

    - name: Display warning about source file
      ansible.builtin.debug:
        msg: "IMPORTANT: Please delete the source keypair file at {{ source_path }} immediately!"
