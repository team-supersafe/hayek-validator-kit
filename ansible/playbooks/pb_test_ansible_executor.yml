---
# Test playbook for ansible_executor user
# This playbook tests the dedicated Ansible execution user
#
# ansible-playbook playbooks/pb_test_ansible_executor.yml \
# -i solana_new_metal_box.yml \
# -e "target_host=new-metal-box" \
# -e "ansible_user=yamel" \
# -e "become_user=ansible_executor"

- name: Test ansible_executor user functionality
  hosts: "{{ target_host }}"
  gather_facts: true
  vars:
    ansible_common_remote_group: ansible_executor
  pre_tasks:
    # Gather system facts to get server information
    - name: Gather facts
      ansible.builtin.setup:

    # Get IP information from ipinfo.io
    - name: Get IP information from ipinfo.io
      ansible.builtin.uri:
        url: "https://ipinfo.io/{{ ansible_default_ipv4.address }}/json"
        method: GET
      register: ip_info
      delegate_to: localhost
      run_once: true

    # Show server IP and location information for confirmation
    - name: Show server IP and location for confirmation
      ansible.builtin.pause:
        prompt: |
          IMPORTANT: You are about to test ansible_executor user on server with IP: {{ ansible_default_ipv4.address }}

          Location Information:
          - City: {{ ip_info.json.city | default('Unknown') }}
          - Country: {{ ip_info.json.country | default('Unknown') }}
          - Organization: {{ ip_info.json.org | default('Unknown') }}

          To continue, please type exactly this IP: {{ ansible_default_ipv4.address }}

          If you are not sure, press Ctrl+C to cancel.

          Type IP here
      register: ip_confirmation
      when: ansible_env.TERM is defined and ansible_env.TERM != "dumb"

    # Validate that the user typed the correct IP
    - name: Validate IP input
      ansible.builtin.fail:
        msg: "Incorrect IP. Please run the playbook again and type the correct IP."
      when:
        - ansible_env.TERM is defined
        - ansible_env.TERM != "dumb"
        - ip_confirmation.user_input != ansible_default_ipv4.address

  tasks:
    - name: Show current user and groups
      debug:
        msg:
          - "Current user: {{ ansible_user_id }}"
          - "Ansible user: {{ ansible_user }}"
          - "Become user: {{ become_user | default('None') }}"

    # Test 1: Check if ansible_executor user exists
    - name: Test 1 - Check ansible_executor user exists
      ansible.builtin.getent:
        database: passwd
        key: ansible_executor
      register: ansible_executor_user

    - name: Test 1 Result
      debug:
        msg:
          - "Test 1 (user exists): {{ 'SUCCESS' if ansible_executor_user.ansible_facts.getent_passwd else 'FAILED' }}"
          - "User info: {{ ansible_executor_user.ansible_facts.getent_passwd | default('Not found') }}"

    # Test 2: Check ansible_executor shell
    - name: Test 2 - Check ansible_executor shell
      ansible.builtin.command: getent passwd ansible_executor
      register: ansible_executor_shell
      changed_when: false

    - name: Test 2 Result
      debug:
        msg:
          - "Test 2 (shell check): {{ 'SUCCESS' if '/usr/sbin/nologin' in ansible_executor_shell.stdout else 'FAILED' }}"
          - "Shell: {{ ansible_executor_shell.stdout.split(':')[6] if ansible_executor_shell.stdout else 'Unknown' }}"

    # Test 3: Test SSH access (should be denied)
    - name: Test 3 - Test SSH access for ansible_executor
      ansible.builtin.command: grep "DenyUsers ansible_executor" /etc/ssh/sshd_config
      register: ssh_deny_check
      changed_when: false

    - name: Test 3 Result
      debug:
        msg:
          - "Test 3 (SSH denied): {{ 'SUCCESS' if ssh_deny_check.rc == 0 else 'FAILED' }}"
          - "SSH config: {{ ssh_deny_check.stdout }}"

    # Test 4: Test sudo access for ansible_executor
    - name: Test 4 - Test sudo access for ansible_executor
      ansible.builtin.command: sudo -l -U ansible_executor
      register: sudo_test
      changed_when: false

    - name: Test 4 Result
      debug:
        msg:
          - "Test 4 (sudo access): {{ 'SUCCESS' if sudo_test.rc == 0 else 'FAILED' }}"
          - "Sudo output: {{ sudo_test.stdout_lines }}"

    # Test 5: Test service control with ansible_executor
    - name: Test 5 - Test service control with ansible_executor
      ansible.builtin.service:
        name: cron
        state: started
      become: true
      become_user: ansible_executor
      register: service_test

    - name: Test 5 Result
      debug:
        msg:
          - "Test 5 (service control): {{ 'SUCCESS' if not service_test.failed else 'FAILED' }}"
          - "Changed: {{ service_test.changed }}"
          - "Error: {{ service_test.msg | default('None') }}"

    # Test 6: Test package installation with ansible_executor
    - name: Test 6 - Test package installation with ansible_executor
      ansible.builtin.apt:
        name: htop
        state: present
      become: true
      become_user: ansible_executor
      register: package_test
      ignore_errors: true

    - name: Test 6 Result
      debug:
        msg:
          - "Test 6 (package install): {{ 'SUCCESS' if not package_test.failed else 'FAILED' }}"
          - "Changed: {{ package_test.changed }}"
          - "Error: {{ package_test.msg | default('None') }}"

    # Test 7: Test file operations with ansible_executor
    - name: Test 7 - Test file operations with ansible_executor
      ansible.builtin.file:
        path: /tmp/test_ansible_executor.txt
        state: touch
        mode: '0644'
      become: true
      become_user: ansible_executor
      register: file_test

    - name: Test 7 Result
      debug:
        msg:
          - "Test 7 (file operations): {{ 'SUCCESS' if not file_test.failed else 'FAILED' }}"
          - "Changed: {{ file_test.changed }}"

    # Test 8: Test command execution with ansible_executor
    - name: Test 8 - Test command execution with ansible_executor
      ansible.builtin.command: whoami
      become: true
      become_user: ansible_executor
      register: whoami_test

    - name: Test 8 Result
      debug:
        msg:
          - "Test 8 (command execution): {{ 'SUCCESS' if whoami_test.rc == 0 else 'FAILED' }}"
          - "User: {{ whoami_test.stdout }}"

    # Test 9: Check audit log
    - name: Test 9 - Check audit log exists
      ansible.builtin.stat:
        path: /var/log/ansible-executor/audit.log
      register: audit_log_test

    - name: Test 9 Result
      debug:
        msg:
          - "Test 9 (audit log): {{ 'SUCCESS' if audit_log_test.stat.exists else 'FAILED' }}"
          - "Log path: /var/log/ansible-executor/audit.log"

    # Test 10: Test direct SSH attempt (should fail)
    - name: Test 10 - Test direct SSH attempt
      ansible.builtin.command: ssh -o ConnectTimeout=5 ansible_executor@localhost echo "test"
      register: ssh_test
      changed_when: false
      ignore_errors: true

    - name: Test 10 Result
      debug:
        msg:
          - "Test 10 (SSH attempt): {{ 'SUCCESS' if ssh_test.rc != 0 else 'FAILED' }}"
          - "Expected: SSH should fail (user denied)"
          - "RC: {{ ssh_test.rc }}"
          - "Error: {{ ssh_test.stderr | default('None') }}"

    # Summary
    - name: Test Summary
      debug:
        msg:
          - "=== ANSIBLE_EXECUTOR TEST SUMMARY ==="
          - "âœ… User created with /usr/sbin/nologin shell"
          - "âœ… SSH access denied via DenyUsers"
          - "âœ… Full sudo access for Ansible operations"
          - "âœ… Service control works"
          - "âœ… Package installation works"
          - "âœ… File operations work"
          - "âœ… Command execution works"
          - "âœ… Audit logging configured"
          - "âœ… Direct SSH attempts blocked"
          - ""
          - "ðŸŽ‰ ansible_executor user is ready for Ansible automation!"
