---
# Test playbook to verify validator_operators permissions
# This playbook connects with the current user and uses become_user: validator_operators
#
# NOTE: Uses pipelining to avoid temporary file permission issues
#
# ansible-playbook playbooks/pb_test_group_permissions.yml \
# -i solana_new_metal_box.yml \
# -e "target_host=new-metal-box" \
# -e "ansible_user=yamel" \
# -e "service_action=stop"

- name: Test validator_operators permissions
  hosts: "{{ target_host }}"
  gather_facts: true
  vars:
    ansible_common_remote_group: validator_operators
  pre_tasks:
    # Gather system facts to get server information
    - name: Gather facts
      ansible.builtin.setup:

    # Get IP information from ipinfo.io
    - name: Get IP information from ipinfo.io
      ansible.builtin.uri:
        url: "https://ipinfo.io/{{ ansible_default_ipv4.address }}/json"
        method: GET
      register: ip_info
      delegate_to: localhost
      run_once: true

    # Show server IP and location information for confirmation
    - name: Show server IP and location for confirmation
      ansible.builtin.pause:
        prompt: |
          IMPORTANT: You are about to run this playbook on the server with IP: {{ ansible_default_ipv4.address }}

          Location Information:
          - City: {{ ip_info.json.city | default('Unknown') }}
          - Country: {{ ip_info.json.country | default('Unknown') }}
          - Organization: {{ ip_info.json.org | default('Unknown') }}

          To continue, please type exactly this IP: {{ ansible_default_ipv4.address }}

          If you are not sure, press Ctrl+C to cancel.

          Type IP here
      register: ip_confirmation
      when: ansible_env.TERM is defined and ansible_env.TERM != "dumb"

    # Validate that the user typed the correct IP
    - name: Validate IP input
      ansible.builtin.fail:
        msg: "Incorrect IP. Please run the playbook again and type the correct IP."
      when:
        - ansible_env.TERM is defined
        - ansible_env.TERM != "dumb"
        - ip_confirmation.user_input != ansible_default_ipv4.address

  # tasks:
  #   - name: Show current user and groups
  #     debug:
  #       msg:
  #         - "Current user: {{ ansible_user_id }}"
  #         - "Ansible user: {{ ansible_user }}"

  #   - name: Check user groups
  #     shell: "groups {{ ansible_user }}"
  #     register: user_groups
  #     changed_when: false

  #   - name: Show user groups
  #     debug:
  #       msg: "Groups of {{ ansible_user }}: {{ user_groups.stdout }}"

    # Test 1: Test with explicit sudo (this should work)
    # - name: Test 1 - Stop cron with explicit sudo
    #   ansible.builtin.shell: "sudo systemctl {{ service_action }} cron"
    #   become: true
    #   become_user: validator_operators
    #   register: test1
    #   ignore_errors: true

    # - name: Test 1 Result
    #   debug:
    #     msg:
    #       - "Test 1 (explicit sudo): {{ 'SUCCESS' if test1.rc == 0 else 'FAILED' }}"
    #       - "RC: {{ test1.rc }}"
    #       - "Error: {{ test1.stderr | default('None') }}"

    # Test 1: Use Ansible service module
    - name: Test 1 - Control cron service with service module
      ansible.builtin.service:
        name: cron
        state: "{{ 'stopped' if service_action == 'stop' else 'started' }}"
      #become: true
      #become_user: "{{ ansible_user }}"
      register: test1
      ignore_errors: true

    - name: Test 1 Result
      debug:
        msg:
          - "Test 1 (service module): {{ 'SUCCESS' if not test1.failed else 'FAILED' }}"
          - "Changed: {{ test1.changed }}"
          - "Error: {{ test1.msg | default('None') }}"

    # # Test 2: Install sensitive package (sl)
    # - name: Test 2 - Install at package
    #   ansible.builtin.apt:
    #     name: glances
    #     state: present
    #   become: true
    #   #become_user: root
    #   register: test2
    #   ignore_errors: true

    # - name: Test 2 Result
    #   debug:
    #     msg:
    #       - "=== TEST 2 RESULTS ==="
    #       - "Status: {{ 'SUCCESS' if not test2.failed else 'FAILED' }}"
    #       - "Changed: {{ test2.changed | default('N/A') }}"
    #       - "Return Code: {{ test2.rc | default('N/A') }}"
    #       - "Error Message: {{ test2.msg | default('None') }}"
    #       - "STDERR: {{ test2.stderr | default('None') }}"
    #       - "STDOUT: {{ test2.stdout | default('None') }}"
    #       - "Full Result: {{ test2 }}"






