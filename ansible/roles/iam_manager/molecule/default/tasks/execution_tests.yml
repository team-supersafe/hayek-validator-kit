---
# ========================================
# RBAC VERIFICATION - REAL COMMAND EXECUTION TESTS
# ========================================

- name: Read users from CSV file to build dynamic test matrix
  ansible.builtin.set_fact:
    csv_users: "{{ lookup('file', '/tmp/molecule/' + (csv_file | default('iam_setup.csv'))).split('\n') | select('match', '^[^#].*') | select('match', '^[^user,].*') | map('split', ',') | list }}"

- name: Build execution test matrix from CSV-defined users
  ansible.builtin.set_fact:
    execution_matrix: |
      {%- set tests = [] -%}
      {%- for user_data in csv_users -%}
        {%- if user_data | length >= 6 -%}
          {%- set username = user_data[0] | trim -%}
          {%- set groups = [user_data[2], user_data[3], user_data[4], user_data[5]] | select('string') | select('!=', '') | list -%}
          {%- set role = 'sysadmin' if 'sysadmin' in groups else 'viewer' if 'validator_viewers' in groups else 'operator' if 'validator_operators' in groups else 'admin' if 'validator_admins' in groups else 'unknown' -%}
          {%- for cmd in ['whoami', 'id', 'pwd', 'ls /tmp'] -%}
            {%- set _ = tests.append({'user': username, 'cmd': cmd, 'expect': 'success', 'role': role, 'type': 'safe'}) -%}
          {%- endfor -%}
          {%- if role in ['viewer', 'operator'] -%}
            {%- for cmd in ['sudo -n whoami', 'sudo -n systemctl status', 'sudo -n cat /etc/shadow', 'sudo -n useradd testuser', 'sudo -n apt update', 'sudo -n apt install --dry-run nano', 'sudo -n systemctl stop ssh --dry-run'] -%}
              {%- set _ = tests.append({'user': username, 'cmd': cmd, 'expect': 'block', 'role': role, 'type': 'restricted'}) -%}
            {%- endfor -%}
          {%- elif role in ['admin', 'sysadmin'] -%}
            {%- for cmd in ['sudo -n systemctl status {{ validator_service }}', 'sudo -n journalctl -u {{ validator_service }}', 'sudo -n apt update', 'sudo -n curl --version', 'sudo -n systemctl enable {{ validator_service }}'] -%}
              {%- set _ = tests.append({'user': username, 'cmd': cmd, 'expect': 'success', 'role': role, 'type': 'admin'}) -%}
            {%- endfor -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ tests | to_json }}

- name: Execute command matrix with sudo -n for privilege testing
  ansible.builtin.shell: "su - {{ item.user }} -c '{{ item.cmd | replace('{{ validator_service }}', validator_service) }}'"
  register: execution_results
  loop: "{{ execution_matrix | from_json }}"
  failed_when: false
  changed_when: true

- name: Categorize sudo -n results intelligently
  ansible.builtin.set_fact:
    categorized_results: |
      {%- set results = {'success': [], 'violations': [], 'expected_block': []} -%}
      {%- for i in range(execution_results.results | length) -%}
        {%- set result = execution_results.results[i] -%}
        {%- set test_info = (execution_matrix | from_json)[i] -%}
        {%- if result.rc == 1 and 'sudo: a password is required' in result.stderr and test_info.expect == 'block' -%}
          {%- set _ = results.expected_block.append({
              'test': test_info,
              'result': result,
              'reason': 'sudo_password_required',
              'status': 'SECURITY_CORRECT'
          }) -%}
        {%- elif result.rc == 0 and test_info.expect == 'block' -%}
          {%- set _ = results.violations.append({
              'test': test_info,
              'result': result,
              'reason': 'unauthorized_sudo_access',
              'status': 'SECURITY_VIOLATION'
          }) -%}
        {%- elif (result.rc == 0 or (test_info.cmd.find('systemctl status') != -1 and result.rc in [3, 4]) or (test_info.role == 'sysadmin' and 'sudo: a password is required' in result.stderr)) and test_info.expect == 'success' -%}
          {%- set _ = results.success.append({
              'test': test_info,
              'result': result,
              'reason': 'expected_success' if result.rc == 0 else 'sysadmin_password_required',
              'status': 'WORKING_CORRECTLY'
          }) -%}
        {%- elif result.rc != 0 and test_info.expect == 'success' and not (test_info.cmd.find('systemctl status') != -1 and result.rc in [3, 4]) and not (test_info.role == 'sysadmin' and 'sudo: a password is required' in result.stderr) -%}
          {%- set _ = results.violations.append({
              'test': test_info,
              'result': result,
              'reason': 'unexpected_failure',
              'status': 'COMMAND_BROKEN'
          }) -%}
        {%- else -%}
          {%- set _ = results.expected_block.append({
              'test': test_info,
              'result': result,
              'reason': 'other_block_mechanism',
              'status': 'SECURITY_WORKING'
          }) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ results }}

- name: Set execution test summary for final report
  ansible.builtin.set_fact:
    execution_tests_summary:
      total_tests: "{{ execution_matrix | from_json | length }}"
      successful_executions: "{{ categorized_results.success | length }}"
      expected_blocks: "{{ categorized_results.expected_block | length }}"
      violations: "{{ categorized_results.violations | length }}"
      status: "{{ 'PASSED' if (categorized_results.violations | length == 0) else 'FAILED' }}"
      sudo_password_blocks: "{{ categorized_results.expected_block | selectattr('reason', 'equalto', 'sudo_password_required') | list | length }}"

- name: Build execution test breakdown display
  ansible.builtin.set_fact:
    execution_breakdown_display: |
      {%- set lines = [] -%}
      {%- set user_list = [] -%}
      {%- for user_data in csv_users -%}
        {%- if user_data | length >= 6 -%}
          {%- set username = user_data[0] | trim -%}
          {%- set groups = [user_data[2], user_data[3], user_data[4], user_data[5]] | select('string') | select('!=', '') | list -%}
          {%- set role = 'sysadmin' if 'sysadmin' in groups else 'viewer' if 'validator_viewers' in groups else 'operator' if 'validator_operators' in groups else 'admin' if 'validator_admins' in groups else 'unknown' -%}
          {%- set _ = user_list.append(username + ' (' + role + ')') -%}
        {%- endif -%}
      {%- endfor -%}

      {%- set _ = lines.append("========================================") -%}
      {%- set _ = lines.append("📋 EXECUTION TEST MATRIX EXPLAINED") -%}
      {%- set _ = lines.append("========================================") -%}
      {%- set _ = lines.append("") -%}
      {%- set _ = lines.append("👥 USERS TESTED: " + (user_list | join(', '))) -%}
      {%- set _ = lines.append("🎯 TOTAL COMMANDS: " + (execution_tests_summary.total_tests | string) + " executions") -%}
      {%- set _ = lines.append("") -%}
      {%- set _ = lines.append("📊 COMMAND CATEGORIES BREAKDOWN:") -%}
      {%- set _ = lines.append("") -%}
      {%- set _ = lines.append("🟢 BASIC COMMANDS (should work for everyone):") -%}
      {%- set _ = lines.append("   • Commands: whoami, id, pwd, ls /tmp") -%}
      {%- set _ = lines.append("   • Users: " + (csv_users | length | string) + " (all users)") -%}
      {%- set _ = lines.append("   • Calculation: 4 commands × " + (csv_users | length | string) + " users = " + ((4 * csv_users | length) | string) + " executions") -%}
      {%- set _ = lines.append("   • Expected: ALL SUCCESS") -%}
      {%- set _ = lines.append("") -%}
      {%- set _ = lines.append("🔴 RESTRICTED COMMANDS (should be blocked for viewers/operators):") -%}
      {%- set _ = lines.append("   • Commands: sudo -n whoami, sudo -n systemctl status") -%}
      {%- set _ = lines.append("   •           sudo -n cat /etc/shadow, sudo -n useradd") -%}
      {%- set _ = lines.append("   •           sudo -n apt update/install, sudo -n systemctl stop") -%}
      {%- set viewer_operator_count = 0 -%}
      {%- set admin_count = 0 -%}
      {%- for user_data in csv_users -%}
        {%- if user_data | length >= 6 -%}
          {%- set groups = [user_data[2], user_data[3], user_data[4], user_data[5]] | select('string') | select('!=', '') | list -%}
          {%- if 'validator_viewers' in groups or 'validator_operators' in groups -%}
            {%- set viewer_operator_count = viewer_operator_count + 1 -%}
          {%- elif 'validator_admins' in groups or 'sysadmin' in groups -%}
            {%- set admin_count = admin_count + 1 -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {%- set _ = lines.append("   • Users: " + (viewer_operator_count | string) + " (viewers + operators)") -%}
      {%- set _ = lines.append("   • Calculation: 7 commands × " + (viewer_operator_count | string) + " restricted users = " + ((7 * viewer_operator_count) | string) + " blocks") -%}
      {%- set _ = lines.append("   • Expected: ALL BLOCKED") -%}
      {%- set _ = lines.append("") -%}
      {%- set _ = lines.append("🟡 ADMIN COMMANDS (should work for admins only):") -%}
      {%- set _ = lines.append("   • Commands: sudo -n systemctl status, sudo -n journalctl") -%}
      {%- set _ = lines.append("   •           sudo -n curl, sudo -n apt update") -%}
      {%- set _ = lines.append("   •           sudo -n systemctl enable") -%}
      {%- set _ = lines.append("   • Users: " + (admin_count | string) + " (admins)") -%}
      {%- set _ = lines.append("   • Calculation: 5 commands × " + (admin_count | string) + " admins = " + ((5 * admin_count) | string) + " executions") -%}
      {%- set _ = lines.append("   • Expected: ALL SUCCESS") -%}
      {%- set _ = lines.append("") -%}
      {%- set total_calc = (4 * csv_users | length) + (7 * viewer_operator_count) + (5 * admin_count) -%}
      {%- set _ = lines.append("🧮 MATH CHECK: " + ((4 * csv_users | length) | string) + " basic + " + ((7 * viewer_operator_count) | string) + " restricted + " + ((5 * admin_count) | string) + " admin = " + (total_calc | string)) -%}
      {%- set _ = lines.append("========================================") -%}
      {{ lines }}

- name: Explain execution test breakdown
  ansible.builtin.debug:
    msg: "{{ execution_breakdown_display }}"

- name: Build execution test results display
  ansible.builtin.set_fact:
    execution_results_display: |
      {%- set lines = [] -%}

      {%- set _ = lines.append("========================================") -%}
      {%- set _ = lines.append("📊 EXECUTION TESTS - DETAILED RESULTS") -%}
      {%- set _ = lines.append("========================================") -%}
      {%- set _ = lines.append("") -%}

      {%- if execution_tests_summary.violations | int == 0 -%}
        {%- set _ = lines.append("🎯 FINAL ANSWER: ALL TESTS PASSED ✅") -%}
        {%- set _ = lines.append("") -%}
        {%- set _ = lines.append("� EXECUTION STATISTICS:") -%}
        {%- set _ = lines.append("• Total commands tested: " + (execution_tests_summary.total_tests | string)) -%}
        {%- set _ = lines.append("• Basic commands successful: " + (execution_tests_summary.successful_executions | string)) -%}
        {%- set _ = lines.append("• Restricted commands blocked: " + (execution_tests_summary.expected_blocks | string)) -%}
        {%- set _ = lines.append("• Security violations found: " + (execution_tests_summary.violations | string)) -%}
        {%- set _ = lines.append("• Success rate: 100%") -%}
        {%- set _ = lines.append("") -%}
        {%- set _ = lines.append("✅ SECURITY ANALYSIS:") -%}
        {%- set _ = lines.append("• All basic commands work for everyone") -%}
        {%- set _ = lines.append("• All restricted commands properly blocked") -%}
        {%- set _ = lines.append("• Admin commands work only for administrators") -%}
        {%- set _ = lines.append("• sudo -n password prompts working correctly") -%}
        {%- set _ = lines.append("• Least privilege principles enforced") -%}
        {%- set _ = lines.append("") -%}
        {%- set _ = lines.append("🎯 VERDICT: SECURITY IS PERFECT ✅") -%}
        {%- set _ = lines.append("System ready for production deployment.") -%}
      {%- else -%}
        {%- set _ = lines.append("🚨 FINAL ANSWER: SECURITY BREACH DETECTED ❌") -%}
        {%- set _ = lines.append("") -%}
        {%- set _ = lines.append("📊 EXECUTION STATISTICS:") -%}
        {%- set _ = lines.append("• Total commands tested: " + (execution_tests_summary.total_tests | string)) -%}
        {%- set _ = lines.append("• Basic commands successful: " + (execution_tests_summary.successful_executions | string)) -%}
        {%- set _ = lines.append("• Restricted commands blocked: " + (execution_tests_summary.expected_blocks | string)) -%}
        {%- set _ = lines.append("• Security violations found: " + (execution_tests_summary.violations | string)) -%}
        {%- set _ = lines.append("• Success rate: " + (((execution_tests_summary.total_tests | int - execution_tests_summary.violations | int) / execution_tests_summary.total_tests | int * 100) | round(1) | string) + "%") -%}
        {%- set _ = lines.append("") -%}
        {%- set _ = lines.append("🚨 SECURITY PROBLEMS DETECTED:") -%}
        {%- if execution_tests_summary.violations | int > 0 -%}
          {%- set _ = lines.append("• " + (execution_tests_summary.violations | string) + " unauthorized command executions") -%}
          {%- set _ = lines.append("• Users can access restricted commands they shouldn't") -%}
          {%- set _ = lines.append("• RBAC permissions are incorrectly configured") -%}
        {%- endif -%}
        {%- set _ = lines.append("") -%}
        {%- set _ = lines.append("⚠️ ACTION REQUIRED:") -%}
        {%- set _ = lines.append("1. Review sudoers configuration") -%}
        {%- set _ = lines.append("2. Check role assignments in /etc/sudoers.d/") -%}
        {%- set _ = lines.append("3. Verify user group memberships") -%}
        {%- set _ = lines.append("4. Re-run tests until all violations are resolved") -%}
        {%- set _ = lines.append("") -%}
        {%- set _ = lines.append("🛑 VERDICT: SECURITY NEEDS IMMEDIATE ATTENTION ❌") -%}
        {%- set _ = lines.append("DO NOT DEPLOY TO PRODUCTION UNTIL RESOLVED!") -%}
      {%- endif -%}

      {%- set _ = lines.append("========================================") -%}
      {{ lines }}

- name: Display execution test results
  ansible.builtin.debug:
    msg: "{{ execution_results_display }}"

- name: Display execution violations if any
  ansible.builtin.debug:
    msg: "🚨 EXECUTION VIOLATION: User {{ item.test.user }} ({{ item.test.role }}) executed '{{ item.test.cmd }}' successfully when it should have been blocked!"
  loop: "{{ categorized_results.violations | default([]) }}"
  when: categorized_results.violations | length > 0
