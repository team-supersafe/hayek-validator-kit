---
# Initialize Vault File
# Creates an empty vault file with secure permissions (0600)
# This ensures the vault file exists before any operations
- name: Create empty vault file
  ansible.builtin.copy:
    dest: "{{ generated_pass_file }}"
    content: ""
    mode: '0600'
  delegate_to: localhost
  run_once: true

# Read User Data
# Reads the CSV file containing user information
# Uses the 'user' column as the key for each entry
- name: Read users from CSV
  ansible.builtin.read_csv:
    path: "{{ users_file }}"
    key: user
  register: users_csv
  delegate_to: localhost
  run_once: true

# Debug Output
# Displays the contents of the CSV file for verification
# Helps in troubleshooting if there are issues with the CSV data
- name: Debug CSV content
  ansible.builtin.debug:
    var: users_csv
  delegate_to: localhost
  run_once: true

# Generate Passwords
# Creates random passwords for each user with:
# - 16 characters length
# - Includes letters, numbers, and special characters (!@*-)
# - Stores passwords in a dictionary with usernames as keys
- name: Generate random passwords for users
  ansible.builtin.set_fact:
    user_passwords: "{{ user_passwords | default({}) | combine({item.key: lookup('password', '/dev/null length=16 chars=ascii_letters,digits,!@*-')}) }}"
  loop: "{{ users_csv.dict | dict2items }}"
  delegate_to: localhost
  run_once: true
  no_log: true
  register: password_result
  ignore_errors: true

# Debug Password Generation
# Shows password generation results if there were any errors
# Only runs if the previous task failed
- name: Debug password generation result
  ansible.builtin.debug:
    var: password_result
  delegate_to: localhost
  run_once: true
  when: password_result is failed

# Create Vault Content
# Generates the YAML content for the vault file
# Creates a temporary file with user passwords in YAML format
- name: Create temporary vault content
  ansible.builtin.copy:
    content: |
      {% for user, password in user_passwords.items() %}
      {{ user }}_password: "{{ password }}"
      {% endfor %}
    dest: "/tmp/new_vault.yml"
    mode: '0600'
  delegate_to: localhost
  run_once: true
  no_log: true

# Encrypt Vault
# Encrypts the temporary vault file using ansible-vault
# Ensures passwords are stored securely
- name: Encrypt new vault
  ansible.builtin.command: ansible-vault encrypt /tmp/new_vault.yml
  delegate_to: localhost
  run_once: true

# Backup Current Vault
# Creates a backup of the existing vault file
# Adds .bak extension to the original file
- name: Backup existing vault
  ansible.builtin.copy:
    src: "{{ generated_pass_file }}"
    dest: "{{ generated_pass_file }}.bak"
    mode: '0600'
  delegate_to: localhost
  run_once: true

# Update Vault
# Replaces the current vault with the new encrypted version
# Maintains secure permissions (0600)
- name: Replace vault with new one
  ansible.builtin.copy:
    src: "/tmp/new_vault.yml"
    dest: "{{ generated_pass_file }}"
    mode: '0600'
    remote_src: true
  delegate_to: localhost
  run_once: true

# Cleanup
# Removes the temporary vault file
# Ensures no sensitive data remains in temporary storage
- name: Remove temporary vault file
  ansible.builtin.file:
    path: "/tmp/new_vault.yml"
    state: absent
  delegate_to: localhost
  run_once: true
