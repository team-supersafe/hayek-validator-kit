---
# Ensure validator_operators group exists
- name: Ensure validator_operators group exists
  ansible.builtin.group:
    name: validator_operators
    state: present

# Create the dedicated 'sol' user for validator service from CSV
- name: Create sol user for validator service
  ansible.builtin.user:
    name: "{{ solana_user }}"
    shell: /usr/sbin/nologin
    state: present
    system: true
    create_home: true
    home: /home/{{ solana_user }}
    append: true
  no_log: true
  when: 
    - solana_user in users_csv.dict.keys()
    - sol_user_in_csv | default(false) | bool

# Get unique groups from CSV
- name: Get unique groups
  ansible.builtin.set_fact:
    unique_groups: "{{
      (users_csv.dict.values() | map(attribute='group_a') | list +
       users_csv.dict.values() | map(attribute='group_b') | list +
       users_csv.dict.values() | map(attribute='group_c') | list) |
      reject('equalto', '') |
      reject('none') |
      map('lower') |
      unique |
      list
      }}"
  no_log: false

# Debug unique groups
- name: Debug unique groups
  ansible.builtin.debug:
    msg: "Unique groups found: {{ unique_groups }}"
  no_log: false

# Create RBAC groups from CSV
- name: Create RBAC groups from CSV
  ansible.builtin.group:
    name: "{{ item | lower }}"
    state: present
  loop: "{{ unique_groups }}"
  when: item != "" and item is not none and item | length > 0
  no_log: true

# Create users from CSV data with RBAC groups
- name: Create users from CSV
  ansible.builtin.user:
    name: "{{ item.key }}"
    shell: /bin/bash
    state: present
    groups: "{{ [item.value.group_a, item.value.group_b, item.value.group_c] | select('defined') | select('string') | reject('equalto', '') | reject('none') | map('lower') | list | join(',') }}"
    append: true
  loop: "{{ users_csv.dict | dict2items }}"
  when: item.key != solana_user 
  no_log: true

# Debug user group assignments
- name: Debug user group assignments
  ansible.builtin.debug:
    msg: "User {{ item.key }} assigned to groups: {{ [item.value.group_a, item.value.group_b, item.value.group_c] | select('defined') | select('string') | reject('equalto', '') | reject('none') | map('lower') | list | join(',') }}"
  loop: "{{ users_csv.dict | dict2items }}"
  no_log: true

# Create ssh directories for users
- name: Ensure .ssh directories exist
  ansible.builtin.file:
    path: "/home/{{ item.key }}/.ssh"
    state: directory
    mode: '0700'
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
  loop: "{{ users_csv.dict | dict2items }}"
  no_log: true

# Add SSH authorized keys (extract key from format with email)
- name: Debug SSH key processing
  ansible.builtin.debug:
    msg: "Processing SSH key for user {{ item.key }}: {{ item.value.key }}"
  loop: "{{ users_csv.dict | dict2items }}"
  when: item.value.key is defined and item.value.key != "" and item.value.key is not none and item.value.key | length > 0
  no_log: true

- name: Extract SSH key part
  ansible.builtin.set_fact:
    ssh_keys: "{{ ssh_keys | default({}) | combine({item.key: item.value.key}) }}"
  loop: "{{ users_csv.dict | dict2items }}"
  when: >
    item.value.key is defined and
    item.value.key != "" and
    item.value.key is not none and
    item.value.key | length > 0 and
    (item.value.key.startswith('ssh-ed25519 ') or
     item.value.key.startswith('ssh-rsa ') or
     item.value.key.startswith('ecdsa-sha2-nistp256 ') or
     item.value.key.startswith('ecdsa-sha2-nistp384 ') or
     item.value.key.startswith('ecdsa-sha2-nistp521 '))
  no_log: true

- name: Debug extracted SSH keys
  ansible.builtin.debug:
    msg: "Extracted SSH key for {{ item.key }}: {{ ssh_keys[item.key] }}"
  loop: "{{ users_csv.dict | dict2items }}"
  when: >
    item.value.key is defined and
    item.value.key != "" and
    item.value.key is not none and
    item.value.key | length > 0 and
    (item.value.key.startswith('ssh-ed25519 ') or
     item.value.key.startswith('ssh-rsa ') or
     item.value.key.startswith('ecdsa-sha2-nistp256 ') or
     item.value.key.startswith('ecdsa-sha2-nistp384 ') or
     item.value.key.startswith('ecdsa-sha2-nistp521 '))
  no_log: true

- name: Add authorized keys
  ansible.posix.authorized_key:
    user: "{{ item.key }}"
    key: "{{ ssh_keys[item.key] }}"
    state: present
  loop: "{{ users_csv.dict | dict2items }}"
  when: >
    item.value.key is defined and
    item.value.key != "" and
    item.value.key is not none and
    item.value.key | length > 0 and
    (item.value.key.startswith('ssh-ed25519 ') or
     item.value.key.startswith('ssh-rsa ') or
     item.value.key.startswith('ecdsa-sha2-nistp256 ') or
     item.value.key.startswith('ecdsa-sha2-nistp384 ') or
     item.value.key.startswith('ecdsa-sha2-nistp521 '))
  no_log: true
  register: ssh_key_result
  ignore_errors: true

- name: Debug SSH key results
  ansible.builtin.debug:
    var: ssh_key_result
  when: ssh_key_result is defined
  no_log: true

- name: Debug users skipped due to invalid SSH keys
  ansible.builtin.debug:
    msg: "Skipping SSH key for user {{ item.key }} - invalid or empty key: '{{ item.value.key }}'"
  loop: "{{ users_csv.dict | dict2items }}"
  when: >
    not (item.value.key is defined and
    item.value.key != "" and
    item.value.key is not none and
    item.value.key | length > 0 and
    (item.value.key.startswith('ssh-ed25519 ') or
     item.value.key.startswith('ssh-rsa ') or
     item.value.key.startswith('ecdsa-sha2-nistp256 ') or
     item.value.key.startswith('ecdsa-sha2-nistp384 ') or
     item.value.key.startswith('ecdsa-sha2-nistp521 ')))
  no_log: true

# Set proper permissions for authorized_keys files
- name: Set authorized_keys permissions
  ansible.builtin.file:
    path: "/home/{{ item.key }}/.ssh/authorized_keys"
    mode: '0600'
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
  loop: "{{ users_csv.dict | dict2items }}"
  when: >
    item.value.key is defined and
    item.value.key != "" and
    item.value.key is not none and
    item.value.key | length > 0 and
    (item.value.key.startswith('ssh-ed25519 ') or
     item.value.key.startswith('ssh-rsa ') or
     item.value.key.startswith('ecdsa-sha2-nistp256 ') or
     item.value.key.startswith('ecdsa-sha2-nistp384 ') or
     item.value.key.startswith('ecdsa-sha2-nistp521 ')) and
    ssh_keys is defined and
    ssh_keys[item.key] is defined
  no_log: true


