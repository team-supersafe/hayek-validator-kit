---
# Update apt cache
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
  delegate_to: localhost
  run_once: true

# Ensure age is installed
- name: Ensure age is installed
  ansible.builtin.package:
    name: age
    state: present
  delegate_to: localhost
  run_once: true

# Read passwords from vault file
# Decrypts the vault file to get the generated passwords
- name: Read passwords from vault
  ansible.builtin.command: ansible-vault view "{{ generated_pass_file }}"
  register: vault_content
  delegate_to: localhost
  run_once: true
  no_log: true

# Parse vault content to get passwords
# Extracts passwords from the vault content using the CSV usernames
- name: Parse vault content
  ansible.builtin.set_fact:
    user_passwords: "{{ user_passwords | default({}) | combine({item: vault_content.stdout | regex_search(item + '_password: \"(.*?)\"', '\\1') | first}) }}"
  loop: "{{ users_csv.dict.keys() | list }}"
  delegate_to: localhost
  run_once: true
  no_log: true

# Create encrypted password files
# Encrypts each user's password using age
- name: Create encrypted password files
  ansible.builtin.shell: >
    echo "{{ user_passwords[item] }}" | age -r "{{ users_csv.dict[item].key }}" > /tmp/{{ item }}_password.age
  loop: "{{ users_csv.dict.keys() | list }}"
  delegate_to: localhost
  run_once: true
  no_log: true
  register: encryption_result

# Read encrypted passwords
# Reads the encrypted password files and stores them in a variable
# This allows for secure transmission of passwords to the remote server
- name: Read encrypted passwords
  ansible.builtin.slurp:
    src: "/tmp/{{ item }}_password.age"
  register: encrypted_passwords
  loop: "{{ users_csv.dict.keys() | list }}"
  delegate_to: localhost
  run_once: true
  no_log: true

