---
# Configure ISO 27001 compliant audit logging for password reset system
# This implements comprehensive logging and monitoring for security compliance

# Create audit log directory for ISO 27001 compliance
- name: Create password audit log directory
  ansible.builtin.file:
    path: "{{ password_audit_log_dir | default('/var/log') }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  no_log: true

# Create password audit log file with proper permissions
- name: Create password audit log file
  ansible.builtin.file:
    path: "{{ password_audit_log | default('/var/log/password-reset.log') }}"
    state: touch
    mode: '0640'
    owner: root
    group: adm
  no_log: true

# Configure logrotate for password reset logs (ISO 27001 compliance)
- name: Configure logrotate for password reset logs
  ansible.builtin.copy:
    content: |
      {{ password_audit_log | default('/var/log/password-reset.log') }} {
          daily
          missingok
          rotate 90
          compress
          delaycompress
          notifempty
          create 640 root adm
          postrotate
              /usr/lib/rsyslog/rsyslog-rotate
          endscript
      }
    dest: /etc/logrotate.d/password-reset
    mode: '0644'
    owner: root
    group: root
  no_log: true

# Create monitoring script for security analysis
- name: Create password reset monitoring script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Password Reset Security Monitoring Script
      # ISO 27001 Compliance Tool

      LOG_FILE="{{ password_audit_log | default('/var/log/password-reset.log') }}"

      echo "=== Password Reset Security Analysis ==="
      echo "Log file: $LOG_FILE"
      echo "Analysis time: $(date)"
      echo ""

      # Failed attempts analysis
      echo "=== Failed Attempts Analysis ==="
      failed_attempts=$(grep "SECURITY_QUESTION_FAILED" "$LOG_FILE" 2>/dev/null | wc -l)
      echo "Total failed attempts: $failed_attempts"

      if [ $failed_attempts -gt 0 ]; then
          echo "Failed attempts by user:"
          grep "SECURITY_QUESTION_FAILED" "$LOG_FILE" 2>/dev/null | awk '{print $6}' | sort | uniq -c | sort -nr
      fi

      # Locked accounts analysis
      echo ""
      echo "=== Locked Accounts Analysis ==="
      locked_accounts=$(grep "MAX_ATTEMPTS_EXCEEDED" "$LOG_FILE" 2>/dev/null | wc -l)
      echo "Total locked accounts: $locked_accounts"

      if [ $locked_accounts -gt 0 ]; then
          echo "Recently locked accounts:"
          grep "MAX_ATTEMPTS_EXCEEDED" "$LOG_FILE" 2>/dev/null | tail -10
      fi

      # Successful password changes
      echo ""
      echo "=== Successful Password Changes ==="
      successful_changes=$(grep "PASSWORD_CHANGE_SUCCESS" "$LOG_FILE" 2>/dev/null | wc -l)
      echo "Total successful password changes: $successful_changes"

      if [ $successful_changes -gt 0 ]; then
          echo "Recent successful changes:"
          grep "PASSWORD_CHANGE_SUCCESS" "$LOG_FILE" 2>/dev/null | tail -10
      fi

      # Session analysis
      echo ""
      echo "=== Session Analysis ==="
      total_sessions=$(grep "SESSION_START" "$LOG_FILE" 2>/dev/null | wc -l)
      completed_sessions=$(grep "SESSION_END" "$LOG_FILE" 2>/dev/null | wc -l)
      echo "Total sessions started: $total_sessions"
      echo "Total sessions completed: $completed_sessions"
      echo "Incomplete sessions: $((total_sessions - completed_sessions))"

      # IP address analysis
      echo ""
      echo "=== IP Address Analysis ==="
      echo "Top IP addresses accessing password reset:"
      grep "SESSION_START" "$LOG_FILE" 2>/dev/null | awk '{print $8}' | sort | uniq -c | sort -nr | head -10

      echo ""
      echo "=== Security Recommendations ==="
      if [ $failed_attempts -gt 10 ]; then
          echo "⚠️  WARNING: High number of failed attempts detected"
      fi
      if [ $locked_accounts -gt 0 ]; then
          echo "⚠️  WARNING: Accounts have been locked due to failed attempts"
      fi
      if [ $((total_sessions - completed_sessions)) -gt 5 ]; then
          echo "⚠️  WARNING: Multiple incomplete sessions detected"
      fi

      echo "✅ Analysis complete"
    dest: /usr/local/sbin/password-reset-monitor
    mode: '0755'
    owner: root
    group: root
  no_log: true

