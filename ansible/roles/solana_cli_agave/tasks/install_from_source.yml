- name: Start Building Agave
  ansible.builtin.debug:
    msg: "Building Agave version {{ agave_version }} from source"

- name: Ensure validator releases directory exists
  ansible.builtin.file:
    path: "{{ validator_solana_installed_releases_dir }}"
    owner: "{{ solana_user }}"
    group: "{{ validator_operators_group }}"
    mode: "{{ validator_data_mode_owner_readonly }}"
    state: directory
  become: true

- name: Set local variable for agave_build_dir
  ansible.builtin.set_fact:
    agave_build_dir: "{{ validator_build_dir }}/agave"

- name: Set local variable for solana_installed_release_dir
  ansible.builtin.set_fact:
    solana_installed_release_dir: "{{ validator_solana_installed_releases_dir }}/v{{ agave_version }}"

- name: Ensure agave_build_dir directory exists
  ansible.builtin.file:
    path: "{{ agave_build_dir }}"
    state: directory
    mode: "{{ validator_data_mode_owner_readonly }}"
    owner: "{{ solana_user }}"
    group: "{{ validator_operators_group }}"
  become: true

- name: Debug print Agave build directory
  ansible.builtin.debug:
    msg: "Agave build directory: {{ agave_build_dir }}"

- name: Prepare Agave source code (download and extract)
  block:
    - name: Set local boolean for repository selection
      ansible.builtin.set_fact:
        use_official_repo_bool: "{{ use_official_repo | default(false) | bool }}"

    - name: Debug repository selection for download
      ansible.builtin.debug:
        msg: "Using {{ use_official_repo_bool | ternary('official', 'forked') }} Agave repository for download: {{ use_official_repo_bool | ternary(agave_official_repo, agave_forked_repo) }}"

    - name: Set download URL based on repository selection
      ansible.builtin.set_fact:
        agave_download_url: "{{ use_official_repo_bool | ternary(agave_official_repo, agave_forked_repo) }}/archive/refs/tags/v{{ agave_version }}.tar.gz"

    - name: Debug download URL
      ansible.builtin.debug:
        msg: "Download URL: {{ agave_download_url }}"

    - name: Unarchive Agave source code from tag
      ansible.builtin.unarchive:
        src: "{{ agave_download_url }}"
        dest: "{{ agave_build_dir }}"
        remote_src: true
        creates: "{{ agave_build_dir }}/agave-{{ agave_version }}"

    - name: Parse forked repo name from agave_forked_repo URL
      ansible.builtin.set_fact:
        agave_forked_repo_name: "{{ agave_forked_repo | regex_replace('.*/', '') }}"
      when: not use_official_repo_bool

    - name: Set extracted Agave directory name
      ansible.builtin.set_fact:
        agave_extracted_dir_name: "{{ use_official_repo_bool | ternary('agave', agave_forked_repo_name) }}"

    - name: Read version from Cargo.toml to verify
      ansible.builtin.shell: grep '^version =' Cargo.toml | head -n1 | awk -F '"' '{print $2}'
      args:
        chdir: "{{ agave_build_dir }}/{{ agave_extracted_dir_name }}-{{ agave_version }}"
      register: cargo_toml_version
      changed_when: false

    - name: Debug Cargo.toml version
      ansible.builtin.debug:
        msg: "Cargo.toml version: {{ cargo_toml_version.stdout }} | Expected: {{ agave_version }}"

    - name: Fail if Cargo.toml version does not match agave_version
      ansible.builtin.fail:
        msg: "Cargo.toml version ({{ cargo_toml_version.stdout }}) does not match expected agave_version ({{ agave_version }})!"
      when: cargo_toml_version.stdout != agave_version
      changed_when: false
      ignore_errors: "{{ ansible_check_mode }}"

- name: Prepare sources and build using cargo
  block:
    - name: Fix ownership of agave_build_dir
      ansible.builtin.file:
        path: "{{ agave_build_dir }}"
        owner: "{{ solana_user }}"
        group: "{{ validator_operators_group }}"
        recurse: true

    - name: Run cargo-install-all.sh
      ansible.builtin.shell: |
        set -e
        . "{{ validator_root_dir }}/.cargo/env"
        ./scripts/cargo-install-all.sh . > {{ agave_build_dir }}/agave-build.log 2>&1
      args:
        chdir: "{{ agave_build_dir }}/{{ agave_extracted_dir_name }}-{{ agave_version }}"
      environment:
        CARGO_HOME: "{{ validator_root_dir }}/.cargo"
        RUSTUP_HOME: "{{ validator_root_dir }}/.rustup"
  become: true

# The above will compile the source code and create the following:
# A bin directory, .crates.toml and .crates2.json files.
- name: Move built Agave assets into the releases directory (with failure handling)
  block:
    - name: Ensure release directory exists
      ansible.builtin.file:
        path: "{{ solana_installed_release_dir }}"
        state: directory
        mode: "{{ validator_data_mode_owner_readonly }}"
        owner: "{{ solana_user }}"
        group: "{{ validator_operators_group }}"
      register: release_dir_result

    - name: Move agave we just built into the releases directory
      ansible.builtin.shell: |
        set -e
        mv "{{ agave_build_dir }}/{{ agave_extracted_dir_name }}-{{ agave_version }}/.crates.toml" "{{ solana_installed_release_dir }}"
        mv "{{ agave_build_dir }}/{{ agave_extracted_dir_name }}-{{ agave_version }}/.crates2.json" "{{ solana_installed_release_dir }}"
        mv "{{ agave_build_dir }}/{{ agave_extracted_dir_name }}-{{ agave_version }}/bin" "{{ solana_installed_release_dir }}"

    - name: Fix ownership of release directory and contents
      ansible.builtin.file:
        path: "{{ solana_installed_release_dir }}"
        owner: "{{ solana_user }}"
        group: "{{ validator_operators_group }}"
        recurse: true
  become: true
  rescue:
    - name: Fail if moving built assets or creating release directory failed
      ansible.builtin.fail:
        msg: |
          Failed to move built Agave assets or create the releases directory.
          Directory creation failed: {{ release_dir_result.failed | default('unknown') }}
          Check if .crates.toml, .crates2.json, and bin exist in {{ agave_build_dir }}/{{ agave_extracted_dir_name }}-{{ agave_version }}

- name: Create symlink to new release
  ansible.builtin.file:
    src: "{{ solana_installed_release_dir }}"
    dest: "{{ validator_root_dir }}/install/active_release"
    state: link
    owner: "root"
    group: "{{ validator_operators_group }}"
    force: true
  become: true
