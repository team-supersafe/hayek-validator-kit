- name: Start Building Jito-Solana CLI
  ansible.builtin.debug:
    msg: "Building Jito-Solana CLI version {{ jito_tag }} from source"

- name: Ensure validator releases directory exists
  ansible.builtin.file:
    path: "{{ validator_solana_installed_releases_dir }}"
    owner: "{{ solana_user }}"
    group: "{{ validator_operators_group }}"
    mode: "{{ validator_data_mode_owner_readonly }}"
    state: directory
  become: true

- name: Set local variable for jito_build_dir
  ansible.builtin.set_fact:
    jito_build_dir: "{{ validator_build_dir }}/jito-solana/{{ jito_tag }}"

- name: Set local variable for solana_installed_release_dir
  ansible.builtin.set_fact:
    solana_installed_release_dir: "{{ validator_solana_installed_releases_dir }}/{{ jito_tag }}"

- name: Prepare build environment
  block:
    - name: Ensure jito_build_dir directory exists
      ansible.builtin.file:
        path: "{{ jito_build_dir }}"
        state: directory
        mode: "{{ validator_data_mode_owner_readonly }}"
        owner: "root"
        group: "{{ validator_operators_group }}"

    - name: Ensure release directory exists
      ansible.builtin.file:
        path: "{{ solana_installed_release_dir }}"
        state: directory
        mode: "{{ validator_data_mode_owner_readonly }}"
        owner: "{{ solana_user }}"
        group: "{{ validator_operators_group }}"

    - name: Ensure git is installed
      become: true
      ansible.builtin.package:
        name: git
        state: present
  become: true
  rescue:
    - name: Fail with error message
      ansible.builtin.fail:
        msg: "Failed to prepare build environment. Error: {{ ansible_failed_result }}"

- name: Debug print Jito-Solana CLI build directory
  ansible.builtin.debug:
    msg: "Jito-Solana CLI build directory: {{ jito_build_dir }}"

- name: Clone and build Jito-Solana CLI from source
  block:
    - name: Set local boolean for repository selection
      ansible.builtin.set_fact:
        use_official_repo_bool: "{{ use_official_repo | default(false) | bool }}"

    - name: Debug repository selection
      ansible.builtin.debug:
        msg: "Using {{ use_official_repo_bool | ternary('official', 'forked') }} Jito-Solana repository: {{ use_official_repo_bool | ternary(jito_official_repo, jito_forked_repo) }}"

    - name: Clone/Pull Jito-Solana repository with submodules
      ansible.builtin.git:
        repo: "{{ use_official_repo_bool | ternary(jito_official_repo, jito_forked_repo) }}.git"
        dest: "{{ jito_build_dir }}"
        version: "{{ jito_tag }}"
        recursive: true
        force: true
      become: true

    - name: Consolidated git verification (tag, commit, version)
      ansible.builtin.shell: |
        set -e
        current_tag=$(git describe --tags --exact-match 2>/dev/null || echo "none")
        current_commit=$(git rev-parse HEAD)
        tag_commit=$(git rev-list -n 1 "{{ jito_tag }}" 2>/dev/null || echo "none")

        if [ "$current_tag" != "{{ jito_tag }}" ]; then
          echo "ERROR: Expected tag {{ jito_tag }}, but got $current_tag"
          exit 1
        fi

        if [ "$current_commit" != "$tag_commit" ]; then
          echo "ERROR: Tag {{ jito_tag }} does not point to current commit"
          echo "Current commit: $current_commit"
          echo "Tag commit: $tag_commit"
          exit 1
        fi

        echo "Git verification passed: tag $current_tag, commit $current_commit"
      args:
        chdir: "{{ jito_build_dir }}"
      register: git_verification
      become: true
      changed_when: false

    - name: Get the latest commit hash
      ansible.builtin.command: git rev-parse HEAD
      args:
        chdir: "{{ jito_build_dir }}"
      register: ci_commit
      become: true
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Read version from Cargo.toml
      ansible.builtin.shell: grep '^version' Cargo.toml | head -n1 | awk -F '"' '{print $2}'
      args:
        chdir: "{{ jito_build_dir }}"
      register: cargo_toml_version
      changed_when: false

    - name: Fail if Cargo.toml version does not match jito_version
      ansible.builtin.fail:
        msg: "Cargo.toml version ({{ cargo_toml_version.stdout }}) does not match expected jito_version ({{ jito_version }})!"
      when: cargo_toml_version.stdout != jito_version
      changed_when: false
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Build Jito-Solana CLI
      ansible.builtin.shell: |
        set -e
        . "{{ validator_root_dir }}/.cargo/env"
        ./scripts/cargo-install-all.sh --validator-only {{ solana_installed_release_dir }} > {{ jito_build_dir }}/jito-build.log 2>&1
      environment:
        CI_COMMIT: "{{ ci_commit.stdout }}"
        CARGO_HOME: "{{ validator_root_dir }}/.cargo"
        RUSTUP_HOME: "{{ validator_root_dir }}/.rustup"
      args:
        chdir: "{{ jito_build_dir }}"
        creates: "{{ solana_installed_release_dir }}/bin/solana"
      ignore_errors: "{{ ansible_check_mode }}"
      become: true

    - name: Fix ownership of release directory and contents
      ansible.builtin.file:
        path: "{{ solana_installed_release_dir }}"
        owner: "{{ solana_user }}"
        group: "{{ validator_operators_group }}"
        recurse: true
      become: true
  rescue:
    - name: Fail with error message
      ansible.builtin.fail:
        msg: "Failed to build Jito-Solana from source. Error: {{ ansible_failed_result }}"

- name: Create symlink to new release
  ansible.builtin.file:
    src: "{{ solana_installed_release_dir }}"
    dest: "{{ validator_root_dir }}/install/active_release"
    state: link
    owner: "root"
    group: "{{ validator_operators_group }}"
    force: true
  become: true
