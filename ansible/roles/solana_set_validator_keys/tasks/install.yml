---
- name: install - Stop and Remove Validator service
  block:
    - name: install - Check if validator service exists and is running
      ansible.builtin.systemd:
        name: "{{ validator_service_name }}"
      register: service_status
      changed_when: false
      failed_when: false

    - name: install - Stop validator service if running
      ansible.builtin.systemd:
        name: "{{ validator_service_name }}"
        state: stopped
        enabled: false
      register: stop_result
      retries: 3
      delay: 10
      until: stop_result is success
      when: service_status.status.ActiveState == "active"
      become: true

- name: install - Stop and Remove Jito relayer service if applicable
  block:
    - name: install - Check the jito-relayer service status
      ansible.builtin.systemd:
        name: "{{ jito_relayer_service_name }}"
      register: relayer_service_status
      changed_when: false
      failed_when: false

    - name: install - Stop jito-relayer service if running
      ansible.builtin.systemd:
        name: "{{ jito_relayer_service_name }}"
        state: stopped
        enabled: false
      register: relayer_stop_result
      retries: 3
      delay: 10
      until: relayer_stop_result is success
      when: relayer_service_status.status.ActiveState == "active"
      become: true

    - name: install - Remove jito-relayer service unit file if not running on target host
      ansible.builtin.file:
        path: "/etc/systemd/system/{{ jito_relayer_service_name }}.service"
        state: absent
      when: not target_host_running_jito_relayer | default(false)
      become: true

- name: install - Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
  become: true

- name: install - Reset validator keys directory
  block:
    - name: install - Remove validator key store
      ansible.builtin.shell: |
        #!/bin/bash
        set -e
        rm -rf {{ keys_dir }}/*
      delegate_to: "{{ target_host }}"
      become: true

    - name: install - Ensure validator_keys_dir exists
      ansible.builtin.file:
        path: "{{ validator_keys_dir }}"
        state: directory
        mode: '0755'
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
      delegate_to: "{{ target_host }}"
      become: true

- name: install - Install validator keys
  block:
    - name: install - Copy primary-target-identity.json to target host
      ansible.builtin.copy:
        src: "{{ ansible_keys_dir }}/primary-target-identity.json"
        dest: "{{ validator_keys_dir }}/primary-target-identity.json"
        mode: '0600'
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
      become: true

    - name: install - Copy vote-account.json to target host
      ansible.builtin.copy:
        src: "{{ ansible_keys_dir }}/vote-account.json"
        dest: "{{ validator_keys_dir }}/vote-account.json"
        mode: '0600'
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
      become: true

    - name: install - Check if hot-spare-identity.json keypair exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/hot-spare-identity.json"
      register: local_hot_spare_key_exists
      delegate_to: localhost
      run_once: true

    - name: install - Copy hot-spare-identity.json to target host if it exists on ansible_keys_dir
      ansible.builtin.copy:
        src: "{{ ansible_keys_dir }}/hot-spare-identity.json"
        dest: "{{ validator_keys_dir }}/hot-spare-identity.json"
        mode: '0600'
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
      become: true
      when: local_hot_spare_key_exists.stat.exists | default(false)

    - name: install - Generate hot-spare-identity.json keypair
      ansible.builtin.shell: |
        . "$HOME/.cargo/env"
        . "$HOME/.bashrc"
        {{ solana_install_dir }}/solana-keygen new -s --no-bip39-passphrase -o hot-spare-identity.json -f
      args:
        chdir: "{{ validator_keys_dir }}"
      register: keygen_result
      delegate_to: "{{ target_host }}"
      when: not local_hot_spare_key_exists.stat.exists | default(false)

    - name: install - Fail with error message (hot-spare-identity.json)
      ansible.builtin.fail:
        msg: "Could not generate hot-spare-identity.json keypair. Error: {{ keygen_result }}"
      when:
        - not local_hot_spare_key_exists.stat.exists | default(false)
        - keygen_result is defined
        - keygen_result.rc != 0

    - name: install - Create identity.json symlink
      ansible.builtin.file:
        src: "{{ validator_keys_dir }}/{{ 'primary-target-identity.json' if validator_type == 'primary' else 'hot-spare-identity.json' }}"
        dest: "{{ validator_keys_dir }}/identity.json"
        state: link
        force: true

- name: install - Install jito relayer keys if applicable
  block:
    - name: install - Check if Jito Relayer Block Engine key exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/jito-relayer-block-eng.json"
      register: local_key_exists
      delegate_to: localhost
      run_once: true

    - name: install - Copy jito-relayer-block-eng.json to target host if it exists on ansible_keys_dir
      ansible.builtin.copy:
        src: "{{ ansible_keys_dir }}/jito-relayer-block-eng.json"
        dest: "{{ validator_keys_dir }}/jito-relayer-block-eng.json"
        mode: '0600'
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
      become: true
      when: local_key_exists.stat.exists | default(false)

    - name: install - Generate jito-relayer-block-eng.json keypair
      ansible.builtin.shell: |
        . "$HOME/.cargo/env"
        . "$HOME/.bashrc"
        {{ solana_install_dir }}/solana-keygen new -s --no-bip39-passphrase -o jito-relayer-block-eng.json -f
      args:
        chdir: "{{ validator_keys_dir }}"
      register: jito_keygen_result
      delegate_to: "{{ target_host }}"
      when: not local_key_exists.stat.exists | default(false)

    - name: install - Fail with error message (jito-relayer-block-eng.json)
      ansible.builtin.fail:
        msg: "Could not generate jito-relayer-block-eng.json keypair. Error: {{ jito_keygen_result }}"
      when: jito_keygen_result is defined and jito_keygen_result.rc is defined and jito_keygen_result.rc != 0

    - name: install - Check if Jito Relayer Comms private key exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/jito-relayer-comms-pvt.pem"
      register: local_comms_key_exists
      delegate_to: localhost
      run_once: true

    - name: install - Copy Jito Relayer Comms private key to target host if it exists on ansible_keys_dir
      ansible.builtin.copy:
        src: "{{ ansible_keys_dir }}/jito-relayer-comms-pvt.pem"
        dest: "{{ validator_keys_dir }}/jito-relayer-comms-pvt.pem"
        mode: '0600'
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
      become: true
      when: local_comms_key_exists.stat.exists | default(false)

    - name: install - Generate Jito Relayer Comms RSA private key on target host if not found on ansible host
      ansible.builtin.shell: |
        openssl genrsa -out {{ validator_keys_dir }}/jito-relayer-comms-pvt.pem 2048
      args:
        creates: "{{ validator_keys_dir }}/jito-relayer-comms-pvt.pem"
      delegate_to: "{{ target_host }}"
      when: not local_comms_key_exists.stat.exists | default(false)

    - name: install - Generate Jito Relayer Comms RSA public key on target host
      ansible.builtin.shell: |
        openssl rsa -in {{ validator_keys_dir }}/jito-relayer-comms-pvt.pem -pubout -out {{ validator_keys_dir }}/jito-relayer-comms-pub.pem
      args:
        creates: "{{ validator_keys_dir }}/jito-relayer-comms-pub.pem"

  when: target_host_running_jito_relayer | default(false)
