---
- name: Determine Solana cluster parameter for solana commands
  ansible.builtin.set_fact:
    solana_cluster_param: >-
      {%- if 'solana_mainnet' in group_names -%}
      -um
      {%- elif 'solana_testnet' in group_names -%}
      -ut
      {%- elif 'solana_localnet' in group_names -%}
      -ul
      {%- else -%}
      -ul
      {%- endif -%}
  run_once: true

- name: Debug solana cluster parameter
  ansible.builtin.debug:
    msg: "solana_cluster_param: '{{ solana_cluster_param }}'"
  delegate_to: localhost
  run_once: true

- name: Gather facts for localhost
  ansible.builtin.setup:
  delegate_to: localhost
  run_once: true

- name: Set keys dir for local ansible control host and target host
  ansible.builtin.set_fact:
    ansible_keys_dir: "{{ ansible_home_dir }}/.validator-keys/{{ source_validator_name }}"
    validator_keys_dir: "{{ keys_dir }}/{{ source_validator_name }}"

- name: Check required validator keypairs for source_validator_name
  block:
    - name: Check if primary-target-identity.json exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/primary-target-identity.json"
      register: primary_target_identity_file
      delegate_to: localhost
      run_once: true

    - name: Fail if primary-target-identity.json is missing
      ansible.builtin.fail:
        msg: "primary-target-identity.json not found in {{ ansible_keys_dir }}"
      when: not primary_target_identity_file.stat.exists

    - name: Get primary target identity pubkey
      ansible.builtin.command: solana-keygen pubkey {{ ansible_keys_dir }}/primary-target-identity.json
      register: primary_target_pubkey_result
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true

    - name: Set primary target public key
      ansible.builtin.set_fact:
        primary_target_pubkey: "{{ primary_target_pubkey_result.stdout }}"

    - name: Check if vote-account.json exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/vote-account.json"
      register: vote_account_file
      delegate_to: localhost
      run_once: true

    - name: Fail if vote-account.json is missing
      ansible.builtin.fail:
        msg: "vote-account.json not found in {{ ansible_keys_dir }}"
      when: not vote_account_file.stat.exists

    - name: Get vote account pubkey
      ansible.builtin.command: solana-keygen pubkey {{ ansible_keys_dir }}/vote-account.json
      register: vote_account_pubkey_result
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true

    - name: Set vote account public key
      ansible.builtin.set_fact:
        vote_account_pubkey: "{{ vote_account_pubkey_result.stdout }}"

    - name: Check if Jito Relayer Block Engine keypair exists
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/jito-relayer-block-eng.json"
      register: private_key_exists
      delegate_to: localhost
      run_once: true

    - name: Warn if jito-relayer-block-eng.json is missing
      ansible.builtin.debug:
        msg: >
          WARNING: jito-relayer-block-eng.json not found in {{ ansible_keys_dir }}.
          If {{ target_host }} was running a co-hosted Jito Relayer the relayer service
          will start with a new generated keypair. You can run this playbook again when
          you have the correct keypair for which Jito has whitelisted the public key.
      when: not private_key_exists.stat.exists

    - name: Get jito relayer block engine authentication public key
      ansible.builtin.command: solana-keygen pubkey {{ ansible_keys_dir }}/jito-relayer-block-eng.json
      register: jito_relayer_block_engine_pubkey_result
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true
      when: private_key_exists.stat.exists

    - name: Set jito relayer block engine authentication public key
      ansible.builtin.set_fact:
        jito_relayer_block_engine_pubkey: "{{ jito_relayer_block_engine_pubkey_result.stdout }}"
      when: private_key_exists.stat.exists

    - name: Check if hot-spare-identity.json exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/hot-spare-identity.json"
      register: hot_spare_identity_file
      delegate_to: localhost
      run_once: true

    - name: Warn if hot-spare-identity.json is missing
      ansible.builtin.debug:
        msg: >
          WARNING: hot-spare-identity.json not found in {{ ansible_keys_dir }}.
          This keypair will still be generated when copying the keys.
      when: not hot_spare_identity_file.stat.exists

    - name: Get hot spare identity pubkey
      ansible.builtin.command: solana-keygen pubkey {{ ansible_keys_dir }}/hot-spare-identity.json
      register: hot_spare_identity_pubkey_result
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true
      when: hot_spare_identity_file.stat.exists

    - name: Set hot spare identity public key
      ansible.builtin.set_fact:
        hot_spare_identity_pubkey: "{{ hot_spare_identity_pubkey_result.stdout }}"
      when: hot_spare_identity_file.stat.exists

- name: Debug var primary_target_pubkey
  ansible.builtin.debug:
    msg: |
      ===============================================
      SOURCE VALIDATOR KEYSET
      ===============================================
      - Name: ({{ source_validator_name }})
      - Primary Target Identity: {{ primary_target_pubkey }}
      - Hot Spare Identity: {{ hot_spare_identity_pubkey | default('Not found') }}
      - Vote account: {{ vote_account_pubkey }}
      - Jito Relayer Block Engine auth: {{ jito_relayer_block_engine_pubkey | default('Not found') }}
  delegate_to: localhost
  run_once: true

- name: If validator_type is 'primary', check if primary identity is running elsewhere
  block:
    - name: Check if primary target identity is already running on the network
      ansible.builtin.shell: |
        solana {{ solana_cluster_param }} validators --keep-unstaked-delinquents --output json | jq -r '.validators[] | select(.identityPubkey == "{{ primary_target_pubkey }}") | .identityPubkey'
      register: existing_primary_validator_check
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true

    - name: Fail if primary target identity is already running elsewhere
      ansible.builtin.fail:
        msg: |
          CRITICAL: Primary target identity {{ primary_target_pubkey }} is already running on the network!
          This would cause slashing if we start another validator with the same identity.
          Please ensure the primary identity is not running anywhere else before proceeding.
      when: existing_primary_validator_check.stdout != ''
      run_once: true

    - name: Debug primary identity safety check passed
      ansible.builtin.debug:
        msg: "âœ“ Primary target identity {{ primary_target_pubkey }} is not running elsewhere - safe to proceed"
      when: existing_primary_validator_check.stdout == ''
      run_once: true

  when: validator_type == 'primary'
