---
- name: Determine Solana cluster parameter for solana commands
  ansible.builtin.set_fact:
    solana_cluster_param: >-
      {%- if 'solana_mainnet' in group_names -%}
      -um
      {%- elif 'solana_testnet' in group_names -%}
      -ut
      {%- elif 'solana_localnet' in group_names -%}
      -ul
      {%- else -%}
      -ul
      {%- endif -%}
  run_once: true

- name: Debug solana cluster parameter
  ansible.builtin.debug:
    msg: "solana_cluster_param: '{{ solana_cluster_param }}'"
  delegate_to: localhost
  run_once: true

- name: Gather facts for localhost
  ansible.builtin.setup:
  delegate_to: localhost
  run_once: true

- name: Set keys dir for local ansible control host and target host
  ansible.builtin.set_fact:
    ansible_keys_dir: "{{ ansible_home_dir }}/.validator-keys/{{ source_validator_name }}"
    validator_keys_dir: "{{ keys_dir }}/{{ source_validator_name }}"

- name: Check required validator keypairs for source_validator_name
  block:
    - name: Check if primary-target-identity.json exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/primary-target-identity.json"
      register: primary_target_identity_file
      delegate_to: localhost
      run_once: true

    - name: Fail if primary-target-identity.json is missing
      ansible.builtin.fail:
        msg: "primary-target-identity.json not found in {{ ansible_keys_dir }}"
      when: not primary_target_identity_file.stat.exists

    - name: Get primary target identity pubkey
      ansible.builtin.command: solana-keygen pubkey {{ ansible_keys_dir }}/primary-target-identity.json
      register: primary_target_pubkey_result
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true

    - name: Set primary target public key
      ansible.builtin.set_fact:
        primary_target_pubkey: "{{ primary_target_pubkey_result.stdout }}"

    - name: Check if vote-account.json exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/vote-account.json"
      register: vote_account_file
      delegate_to: localhost
      run_once: true

    - name: Fail if vote-account.json is missing
      ansible.builtin.fail:
        msg: "vote-account.json not found in {{ ansible_keys_dir }}"
      when: not vote_account_file.stat.exists

    - name: Get vote account pubkey
      ansible.builtin.command: solana-keygen pubkey {{ ansible_keys_dir }}/vote-account.json
      register: vote_account_pubkey_result
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true

    - name: Set vote account public key
      ansible.builtin.set_fact:
        vote_account_pubkey: "{{ vote_account_pubkey_result.stdout }}"

    - name: Check if Jito Relayer Block Engine keypair exists
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/jito-relayer-block-eng.json"
      register: private_key_exists
      delegate_to: localhost
      run_once: true

    - name: Warn if jito-relayer-block-eng.json is missing
      ansible.builtin.debug:
        msg: >
          WARNING: jito-relayer-block-eng.json not found in {{ ansible_keys_dir }}.
          If {{ target_host }} was running a co-hosted Jito Relayer the relayer service
          will start with a new generated keypair. You can run this playbook again when
          you have the correct keypair for which Jito has whitelisted the public key.
      when: not private_key_exists.stat.exists

    - name: Get jito relayer block engine authentication public key
      ansible.builtin.command: solana-keygen pubkey {{ ansible_keys_dir }}/jito-relayer-block-eng.json
      register: jito_relayer_block_engine_pubkey_result
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true
      when: private_key_exists.stat.exists

    - name: Set jito relayer block engine authentication public key
      ansible.builtin.set_fact:
        jito_relayer_block_engine_pubkey: "{{ jito_relayer_block_engine_pubkey_result.stdout }}"
      when: private_key_exists.stat.exists

    - name: Check if hot-spare-identity.json exists in ansible_keys_dir
      ansible.builtin.stat:
        path: "{{ ansible_keys_dir }}/hot-spare-identity.json"
      register: hot_spare_identity_file
      delegate_to: localhost
      run_once: true

    - name: Warn if hot-spare-identity.json is missing
      ansible.builtin.debug:
        msg: >
          WARNING: hot-spare-identity.json not found in {{ ansible_keys_dir }}.
          This keypair will still be generated when copying the keys.
      when: not hot_spare_identity_file.stat.exists

    - name: Get hot spare identity pubkey
      ansible.builtin.command: solana-keygen pubkey {{ ansible_keys_dir }}/hot-spare-identity.json
      register: hot_spare_identity_pubkey_result
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true
      when: hot_spare_identity_file.stat.exists

    - name: Set hot spare identity public key
      ansible.builtin.set_fact:
        hot_spare_identity_pubkey: "{{ hot_spare_identity_pubkey_result.stdout }}"
      when: hot_spare_identity_file.stat.exists

- name: Display source validator keyset information
  ansible.builtin.debug:
    msg: |
      ===============================================
      SOURCE VALIDATOR KEYSET
      ===============================================
      - Name: ({{ source_validator_name }})
      - Primary Target Identity: {{ primary_target_pubkey }}
      - Hot Spare Identity: {{ hot_spare_identity_pubkey | default('Not found') }}
      - Vote account: {{ vote_account_pubkey }}
      - Jito Relayer Block Engine auth: {{ jito_relayer_block_engine_pubkey | default('Not found') }}
  delegate_to: localhost
  run_once: true

- name: If validator_type is 'primary', check if primary identity is running elsewhere
  block:
    - name: Get target host IP address
      ansible.builtin.setup:
        filter: ansible_default_ipv4
      register: target_host_facts

    - name: Set target host IP
      ansible.builtin.set_fact:
        target_host_ip: "{{ target_host_facts.ansible_facts.ansible_default_ipv4.address }}"

    - name: Check if primary target identity is running on other hosts
      ansible.builtin.shell: |
        solana {{ solana_cluster_param }} gossip | grep "{{ primary_target_pubkey }}" | awk '{print $1}' | grep -v "{{ target_host_ip }}"
      register: existing_primary_validator_on_other_hosts
      delegate_to: localhost
      changed_when: false
      check_mode: false
      run_once: true
      ignore_errors: true

    - name: Fail if primary target identity is already running on other hosts
      ansible.builtin.fail:
        msg: |
          CRITICAL: Primary target identity {{ primary_target_pubkey }} is already running on other host(s)!
          Found running on IP(s): {{ existing_primary_validator_on_other_hosts.stdout_lines | default([]) }}
          This would cause slashing if we start another validator with the same identity.
          Please ensure the primary identity is not running on other hosts before proceeding.
      when: existing_primary_validator_on_other_hosts.stdout != ''
      run_once: true

    - name: Debug primary identity safety check passed
      ansible.builtin.debug:
        msg: |
          âœ“ Primary target identity {{ primary_target_pubkey }} is not running on other hosts
          Target host IP: {{ target_host_ip }}
          Safe to proceed with validator setup/restart
      when: existing_primary_validator_on_other_hosts.stdout == ''
      run_once: true

  when: validator_type == 'primary'

- name: Check if target host is running co-hosted Jito relayer
  block:
    - name: Check Jito relayer systemd service status on target host
      ansible.builtin.systemd:
        name: "{{ jito_relayer_service_name | default('jito-relayer') }}"
      register: jito_relayer_service_status
      ignore_errors: true

    - name: Check Jito relayer process status on target host
      ansible.builtin.shell: ps aux | grep jito-transaction-relayer | grep -v grep
      register: jito_relayer_process_status
      changed_when: false
      ignore_errors: true

    - name: Set fact for co-hosted Jito relayer running status
      ansible.builtin.set_fact:
        target_host_running_jito_relayer: >-
          {{ (jito_relayer_service_status is not failed and
              jito_relayer_service_status.status.ActiveState == 'active' and
              jito_relayer_process_status is not failed and
              jito_relayer_process_status.stdout_lines | length > 0) }}

    - name: Debug Jito relayer status on target host
      ansible.builtin.debug:
        msg: |
          ===============================================
          TARGET HOST JITO RELAYER STATUS
          ===============================================
          - Service Exists: {{ jito_relayer_service_status is not failed }}
          - Service Active: {{ jito_relayer_service_status.status.ActiveState | default('N/A') }}
          - Service Enabled: {{ jito_relayer_service_status.status.UnitFileState | default('N/A') }}
          - Process Running: {{ jito_relayer_process_status.stdout_lines | length > 0 }}
          - Consensus - Co-hosted Relayer Running: {{ target_host_running_jito_relayer }}
