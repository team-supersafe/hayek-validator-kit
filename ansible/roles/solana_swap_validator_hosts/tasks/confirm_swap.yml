---
# source
- name: confirm_swap - Get source hot-spare identity pubkey
  ansible.builtin.command: solana-keygen pubkey {{ source_host_hot_spare_identity_path }}
  register: source_hotspare_pubkey
  environment:
    PATH: "{{ solana_install_dir }}"
  when: inventory_hostname == source_host
  changed_when: false
  check_mode: false

- name: confirm_swap - Make source hotspare pubkey available globally
  ansible.builtin.set_fact:
    source_hotspare_pubkey: "{{ source_hotspare_pubkey.stdout_lines[0] }}"
  run_once: true
  when:
    - source_hotspare_pubkey is defined
    - source_hotspare_pubkey.stdout_lines is defined
    - source_hotspare_pubkey.stdout_lines | length > 0

- name: confirm_swap - Check if source vote account exists
  ansible.builtin.stat:
    path: "{{ source_vote_account_path }}"
  register: source_vote_account_file
  when: inventory_hostname == source_host

- name: confirm_swap - Make source vote account file info available globally
  ansible.builtin.set_fact:
    source_vote_account_file: "{{ hostvars[source_host]['source_vote_account_file'] }}"
  when:
    - hostvars[source_host]['source_vote_account_file'] is defined
  run_once: true

- name: confirm_swap - Get source vote account pubkey
  ansible.builtin.command: solana-keygen pubkey {{ source_vote_account_path }}
  register: source_vote_pubkey_result
  environment:
    PATH: "{{ solana_install_dir }}"
  when:
    - inventory_hostname == source_host
    - source_vote_account_file.stat.exists
  changed_when: false
  check_mode: false

- name: confirm_swap - Make source vote pubkey available globally
  ansible.builtin.set_fact:
    source_vote_pubkey: "{{ source_vote_pubkey_result.stdout_lines[0] }}"
  when: 
    - source_vote_account_file.stat.exists
    - source_vote_pubkey_result is defined
    - source_vote_pubkey_result.stdout_lines is defined
    - source_vote_pubkey_result.stdout_lines | length > 0
  run_once: true

- name: confirm_swap - Ensure source_vote_pubkey is undefined when vote account doesn't exist
  ansible.builtin.set_fact:
    source_vote_pubkey: ""
  when:
    - source_vote_account_file is defined
    - not source_vote_account_file.stat.exists
  run_once: true

# destination
- name: prepare - Check for hot-spare identity
  ansible.builtin.stat:
    path: "{{ destination_host_hot_spare_identity_path }}"
  register: destination_host_hot_spare_identity
  when: inventory_hostname == destination_host

- name: confirm_swap - Get destination hot-spare identity pubkey
  ansible.builtin.shell: "solana-keygen pubkey {{ destination_host_hot_spare_identity_path }}"
  register: destination_hotspare_pubkey_result
  environment:
    PATH: "{{ solana_install_dir }}"
  when:
    - inventory_hostname == destination_host
    - destination_host_hot_spare_identity.stat.exists
  changed_when: false
  check_mode: false

- name: confirm_swap - Make destination hotspare pubkey available globally
  ansible.builtin.set_fact:
    destination_hotspare_pubkey: "{{ destination_hotspare_pubkey_result.stdout_lines[0] }}"
  when:
    - inventory_hostname == destination_host
    - destination_hotspare_pubkey_result is defined
    - destination_hotspare_pubkey_result.stdout_lines is defined
    - destination_hotspare_pubkey_result.stdout_lines | length > 0

- name: confirm_swap - Make destination hotspare pubkey available globally
  ansible.builtin.set_fact:
    destination_hotspare_pubkey: "{{ hostvars[destination_host]['destination_hotspare_pubkey'] }}"
  when:
    - hostvars[destination_host]['destination_hotspare_pubkey'] is defined
  run_once: true

- name: confirm_swap - Check if destination vote account exists
  ansible.builtin.stat:
    path: "{{ destination_host_keys_dir }}/vote-account.json"
  register: destination_vote_account_file
  when: inventory_hostname == destination_host

- name: confirm_swap - Make destination vote account file info available globally
  ansible.builtin.set_fact:
    destination_vote_account_file: "{{ hostvars[destination_host]['destination_vote_account_file'] }}"
  when:
    - hostvars[destination_host]['destination_vote_account_file'] is defined
  run_once: true

- name: confirm_swap - Get destination vote account pubkey
  ansible.builtin.command: solana-keygen pubkey "{{ destination_host_keys_dir }}/vote-account.json"
  register: destination_vote_pubkey_result
  environment:
    PATH: "{{ solana_install_dir }}"
  when:
    - inventory_hostname == destination_host
    - destination_vote_account_file.stat.exists
  changed_when: false
  check_mode: false

- name: confirm_swap - Make destination vote pubkey available globally
  ansible.builtin.set_fact:
    destination_vote_pubkey: "{{ destination_vote_pubkey_result.stdout_lines[0] }}"
  when: 
    - destination_vote_account_file is defined
    - destination_vote_account_file.stat is defined
    - destination_vote_account_file.stat.exists
    - destination_vote_pubkey_result is defined
    - destination_vote_pubkey_result.stdout_lines is defined
    - destination_vote_pubkey_result.stdout_lines | length > 0
  run_once: true

- name: confirm_swap - Ensure destination_vote_pubkey is undefined when vote account doesn't exist
  ansible.builtin.set_fact:
    destination_vote_pubkey: ""
  when:
    - destination_vote_account_file is defined
    - destination_vote_account_file.stat is defined
    - not destination_vote_account_file.stat.exists
  run_once: true

- name: confirm_swap - Display Swap Operation Summary
  ansible.builtin.debug:
    msg: |
      ===============================================
      VALIDATOR SWAP OPERATION SUMMARY
      ===============================================

      Source Validator:
      - Host: {{ source_host }} ({{ source_validator_name }})
      - Primary Target Identity: {{ source_host_primary_target_identity_path }}
      {% if source_primary_pubkey is defined and source_primary_pubkey != '' %}
        Pubkey: {{ source_primary_pubkey }}
      {% else %}
        Pubkey: NOT SET
      {% endif %}
      - Hot-spare Identity: {{ source_host_hot_spare_identity_path }}
      {% if source_hotspare_pubkey is defined and source_hotspare_pubkey != '' %}
        Pubkey: {{ source_hotspare_pubkey }}
      {% else %}
        Pubkey: NOT SET
      {% endif %}
      - Vote Account: {{ source_vote_account_path }}
      {% if source_vote_account_file is defined and source_vote_account_file.stat is defined and source_vote_account_file.stat.exists %}
      {% if source_vote_pubkey is defined and source_vote_pubkey != '' %}
        Pubkey: {{ source_vote_pubkey }}
      {% else %}
        Pubkey: NOT SET
      {% endif %}
      {% else %}
        Status: Keypair was not found
      {% endif %}

      Destination Validator:
      - Host: {{ destination_host }} ({{ destination_validator_name }})
      - Primary Target Identity: {{ destination_host_primary_target_identity_path | default('NOT SET') }}
      {% if destination_primary_pubkey is defined and destination_primary_pubkey != '' %}
        Pubkey: {{ destination_primary_pubkey }}
      {% else %}
        Pubkey: NOT SET
      {% endif %}
      - Hot-spare Identity: {{ destination_host_keys_dir }}/hot-spare-identity.json
      {% if destination_hotspare_pubkey is defined and destination_hotspare_pubkey != '' %}
        Pubkey: {{ destination_hotspare_pubkey }}
      {% else %}
        Pubkey: NOT SET
      {% endif %}
      - Vote Account: {{ destination_host_keys_dir }}/vote-account.json
      {% if destination_vote_account_file is defined and destination_vote_account_file.stat is defined and destination_vote_account_file.stat.exists %}
      {% if destination_vote_pubkey is defined and destination_vote_pubkey != '' %}
        Pubkey: {{ destination_vote_pubkey }}
      {% else %}
        Pubkey: NOT SET
      {% endif %}
      {% else %}
        Status: Keypair was not found
      {% endif %}

      The script will run the next actions:
      1. Wait for safe restart window on source validator
      2. Switch source validator to hot-spare
      3. Transfer tower file to destination
      4. Switch destination to primary target identity
         (Make destination host the new primary validator)

      Please review the above information carefully.
      ===============================================
  delegate_to: localhost
  run_once: true

- name: confirm_swap - Fail if attempting to swap between different validator identities
  ansible.builtin.fail:
    msg: |
      Cannot proceed with validator swap: Primary identity pubkeys do not match!

      Source: {{ source_primary_pubkey }}
      Destination: {{ destination_primary_pubkey }}

      This operation is not supported as it would result in an invalid tower file configuration.
      The tower file is tied to the validator's identity and cannot be transferred between different identities.
  when:
    - inventory_hostname == source_host
    - source_primary_pubkey is defined
    - destination_primary_pubkey is defined
    - source_primary_pubkey != destination_primary_pubkey
  run_once: true

- name: confirm_swap - Confirm Swap Operation
  ansible.builtin.pause:
    prompt: "Do you want to proceed with the validator swap? (yes/no)"
  register: swap_confirmation
  run_once: true

- name: confirm_swap - Make swap confirmation available globally
  ansible.builtin.set_fact:
    swap_confirmation: "{{ hostvars[source_host]['swap_confirmation'] }}"
  run_once: true

- name: confirm_swap - Fail if swap not confirmed
  ansible.builtin.fail:
    msg: "Validator swap operation cancelled by user"
  when: swap_confirmation.user_input | lower != 'yes'
  run_once: true
