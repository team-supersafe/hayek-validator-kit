---
- name: swap - Determine Solana cluster parameter
  ansible.builtin.set_fact:
    solana_cluster_param: >-
      {%- if 'solana_mainnet' in group_names -%}
      -um
      {%- elif 'solana_testnet' in group_names -%}
      -ut
      {%- elif 'solana_localnet' in group_names -%}
      -ul
      {%- else -%}
      -ul
      {%- endif -%}
  run_once: true

- name: swap - Debug solana cluster parameter
  ansible.builtin.debug:
    msg: "solana_cluster_param: '{{ solana_cluster_param }}'"
  delegate_to: localhost
  run_once: true

- name: swap - Ensure enough time left in epoch before swap
  block:
    - name: swap - Get current epoch info
      ansible.builtin.shell: solana {{ solana_cluster_param }} epoch-info --output json
      register: epoch_info
      when: solana_cluster_param is defined
      delegate_to: localhost
      changed_when: false
      check_mode: false

    - name: swap - Debug epoch_info
      ansible.builtin.debug:
        msg: "epoch_info: {{ epoch_info.stdout }}"
      delegate_to: localhost
      run_once: true

    - name: swap - Fail if epoch info stdout is empty
      ansible.builtin.fail:
        msg: Epoch info command returned empty output.
      when: epoch_info.stdout is not defined or epoch_info.stdout == ''
      delegate_to: localhost

    - name: swap - Parse epoch info
      ansible.builtin.set_fact:
        epoch_info_json: "{{ epoch_info.stdout | from_json }}"
        slots_in_epoch: "{{ (epoch_info.stdout | from_json).slotsInEpoch | int }}"
        slot_index: "{{ (epoch_info.stdout | from_json).slotIndex | int }}"
      when:
        - epoch_info.rc == 0
        - epoch_info.stdout is defined
        - epoch_info.stdout != ''

    - name: swap - Calculate seconds remaining in epoch
      ansible.builtin.set_fact:
        slots_remaining: "{{ slots_in_epoch | int - slot_index | int }}"
        seconds_remaining: "{{ (slots_in_epoch | int - slot_index | int) / slots_per_sec }}"
      when:
        - epoch_info_json is defined
        - slots_in_epoch is defined
        - slot_index is defined

    - name: swap - Debug calculated seconds and slots remaining
      ansible.builtin.debug:
        msg: "seconds_remaining: {{ seconds_remaining }}, slots_remaining: {{ slots_remaining }}"
      when:
        - inventory_hostname == source_host
        - seconds_remaining is defined
        - slots_remaining is defined

- name: swap - Fail if less than 3 minutes remain in epoch
  ansible.builtin.fail:
    msg: |
      Only {{ seconds_remaining | float | int }} seconds remain in the current epoch ({{ slots_remaining }} slots).
      Please wait for the new epoch to start and try again when there are at least 3 minutes left in the epoch.
      It is less effective to calculate TVC loss close to the epoch boundary.
  run_once: true
  when:
    - seconds_remaining is defined
    - seconds_remaining | float < swap_epoch_end_threshold_sec

- name: prepare - Generate SSH key for sol user if not present
  community.crypto.openssh_keypair:
    path: "{{ ssh_key_path }}"
    type: "{{ ssh_key_type }}"
    size: "{{ ssh_key_size }}"
  register: ssh_key
  when: not (ssh_key_path is exists)

- name: prepare - Get public key content
  ansible.builtin.slurp:
    src: "{{ ssh_key_path }}.pub"
  register: pubkey
  ignore_errors: "{{ ansible_check_mode }}"

- name: prepare - Authorize key on both hosts
  delegate_to: "{{ item }}"
  ansible.posix.authorized_key:
    user: sol
    key: "{{ pubkey.content | b64decode }}"
  loop: "{{ [source_host, destination_host] }}"
  when:
    - pubkey is defined
    - pubkey.content is defined
  ignore_errors: "{{ ansible_check_mode }}"

- name: prepare - Install prerequisites
  become: true
  ansible.builtin.apt:
    name: rsync
    update_cache: true

- name: prepare - Check for primary target identity file on source host
  block:
    - name: prepare - Check for new convention primary target identity
      ansible.builtin.stat:
        path: "{{ source_host_keys_dir }}/primary-target-identity.json"
      register: new_staked_identity
      when: inventory_hostname == source_host

    - name: prepare - Check for old convention staked identity
      ansible.builtin.stat:
        path: "{{ source_host_keys_dir }}/staked-identity.json"
      register: old_staked_identity
      when: inventory_hostname == source_host

    - name: prepare - Set source host primary target identity path
      ansible.builtin.set_fact:
        source_host_primary_target_identity_path: >-
          {%- if new_staked_identity.stat.exists -%}
          {{ source_host_keys_dir }}/primary-target-identity.json
          {%- elif old_staked_identity.stat.exists -%}
          {{ source_host_keys_dir }}/staked-identity.json
          {%- else -%}
          {{ '' }}
          {%- endif -%}
      when: inventory_hostname == source_host

    - name: prepare - Make source host primary target identity path available globally
      ansible.builtin.set_fact:
        source_host_primary_target_identity_path: "{{ hostvars[source_host]['source_host_primary_target_identity_path'] }}"
      run_once: true

    - name: prepare - Fail if no primary identity found on source host
      ansible.builtin.fail:
        msg: "No primary identity file found on source host. Neither primary-target-identity.json nor staked-identity.json exists in {{ source_host_keys_dir }}"
      when:
        - inventory_hostname == source_host
        - source_host_primary_target_identity_path == ''

    - name: prepare - Check for new convention hot-spare identity
      ansible.builtin.stat:
        path: "{{ source_host_keys_dir }}/hot-spare-identity.json"
      register: new_unstaked_identity
      when: inventory_hostname == source_host

    - name: prepare - Check for old convention unstaked identity
      ansible.builtin.stat:
        path: "{{ source_host_keys_dir }}/unstaked-identity.json"
      register: old_unstaked_identity
      when: inventory_hostname == source_host

    - name: prepare - Set source host hot-spare identity path
      ansible.builtin.set_fact:
        source_host_hot_spare_identity_path: >-
          {%- if new_unstaked_identity.stat.exists -%}
          {{ source_host_keys_dir }}/hot-spare-identity.json
          {%- elif old_unstaked_identity.stat.exists -%}
          {{ source_host_keys_dir }}/unstaked-identity.json
          {%- else -%}
          {{ source_host_keys_dir }}/hot-spare-identity.json
          {%- endif -%}
      when: inventory_hostname == source_host

    - name: prepare - Make source host hot-spare identity path available globally
      ansible.builtin.set_fact:
        source_host_hot_spare_identity_path: "{{ hostvars[source_host]['source_host_hot_spare_identity_path'] }}"
      run_once: true

    - name: prepare - Generate hot-spare identity if it doesn't exist
      ansible.builtin.command: solana-keygen new --no-bip39-passphrase -o {{ source_host_hot_spare_identity_path }}
      environment:
        PATH: "{{ solana_install_dir }}"
      when:
        - inventory_hostname == source_host
        - not new_unstaked_identity.stat.exists
        - not old_unstaked_identity.stat.exists
      register: generated_hotspare

    - name: prepare - Display generated hot-spare pubkey
      ansible.builtin.debug:
        msg: "Generated new hot-spare identity with pubkey: {{ generated_hotspare.stdout_lines | select('match', '^pubkey:') | first | regex_replace('^pubkey: ', '') }}"
      when:
        - inventory_hostname == source_host
        - generated_hotspare is defined
        - generated_hotspare.changed

- name: prepare - Check for primary target identity file on destination host
  block:
    - name: prepare - Check for new convention primary target identity
      ansible.builtin.stat:
        path: "{{ destination_host_keys_dir }}/primary-target-identity.json"
      register: new_staked_identity
      when: inventory_hostname == destination_host

    - name: prepare - Check for old convention staked identity
      ansible.builtin.stat:
        path: "{{ destination_host_keys_dir }}/staked-identity.json"
      register: old_staked_identity
      when: inventory_hostname == destination_host

    - name: prepare - Set destination host primary target identity path
      ansible.builtin.set_fact:
        destination_host_primary_target_identity_path: >-
          {%- if new_staked_identity.stat.exists -%}
          {{ destination_host_keys_dir }}/primary-target-identity.json
          {%- elif old_staked_identity.stat.exists -%}
          {{ destination_host_keys_dir }}/staked-identity.json
          {%- else -%}
          {{ '' }}
          {%- endif -%}
      when: inventory_hostname == destination_host

    - name: prepare - Make destination host primary target identity path available globally
      ansible.builtin.set_fact:
        destination_host_primary_target_identity_path: "{{ hostvars[destination_host]['destination_host_primary_target_identity_path'] }}"
      run_once: true

    - name: prepare - Fail if no primary identity found on destination host
      ansible.builtin.fail:
        msg: "No primary identity file found on destination host. Neither primary-target-identity.json nor staked-identity.json exists in {{ destination_host_keys_dir }}"
      when:
        - inventory_hostname == destination_host
        - destination_host_primary_target_identity_path == ''

- name: prepare - Get source primary target identity pubkey
  ansible.builtin.command: solana-keygen pubkey {{ source_host_primary_target_identity_path | trim }}
  register: source_staked_pubkey
  environment:
    PATH: "{{ solana_install_dir }}"
  when: inventory_hostname == source_host
  changed_when: false
  check_mode: false

- name: prepare - Get destination primary target identity pubkey
  ansible.builtin.command: solana-keygen pubkey {{ destination_host_primary_target_identity_path | trim }}
  register: destination_staked_pubkey
  environment:
    PATH: "{{ solana_install_dir }}"
  when: inventory_hostname == destination_host
  changed_when: false
  check_mode: false

- name: prepare - Set source host pubkey fact
  ansible.builtin.set_fact:
    source_primary_pubkey: "{{ source_staked_pubkey.stdout_lines[0] }}"
  when:
    - inventory_hostname == source_host
    - source_staked_pubkey is defined
    - source_staked_pubkey.stdout_lines is defined
    - source_staked_pubkey.stdout_lines | length > 0

- name: prepare - Set destination host pubkey fact
  ansible.builtin.set_fact:
    destination_primary_pubkey: "{{ destination_staked_pubkey.stdout_lines[0] }}"
  when:
    - inventory_hostname == destination_host
    - destination_staked_pubkey is defined
    - destination_staked_pubkey.stdout_lines is defined
    - destination_staked_pubkey.stdout_lines | length > 0

- name: prepare - Make pubkey facts available globally
  ansible.builtin.set_fact:
    source_primary_pubkey: "{{ hostvars[source_host]['source_primary_pubkey'] }}"
    destination_primary_pubkey: "{{ hostvars[destination_host]['destination_primary_pubkey'] }}"
  run_once: true
  when:
    - hostvars[source_host]['source_primary_pubkey'] is defined
    - hostvars[destination_host]['destination_primary_pubkey'] is defined

- name: prepare - Assert that both primary pubkeys are available
  ansible.builtin.fail:
    msg: |
      Critical error: Primary pubkeys are not properly set.

      Source primary pubkey: {{ source_primary_pubkey | default('NOT SET') }}
      Destination primary pubkey: {{ destination_primary_pubkey | default('NOT SET') }}

      This indicates that the solana-keygen commands failed to execute properly
      or the identity files are missing/corrupted.
  when:
    - not ansible_check_mode
    - (source_primary_pubkey is not defined or source_primary_pubkey == '') or
      (destination_primary_pubkey is not defined or destination_primary_pubkey == '')
  run_once: true
