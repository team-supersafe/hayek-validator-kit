---
- name: swap - Get pre-swap vote account stats
  block:
    - name: swap - Determine Solana cluster parameter
      ansible.builtin.set_fact:
        solana_cluster_param: >-
          {%- if 'solana_mainnet' in group_names -%}
          -um
          {%- elif 'solana_testnet' in group_names -%}
          -ut
          {%- elif 'solana_localnet' in group_names -%}
          -ul
          {%- else -%}
          -ul
          {%- endif -%}
      run_once: true

    - name: summary - Debug var source_primary_pubkey
      ansible.builtin.debug:
        msg: "Value of source_primary_pubkey: {{ source_primary_pubkey }}"
      delegate_to: localhost
      run_once: true

    - name: summary - Debug var source_vote_pubkey
      ansible.builtin.debug:
        msg: "Value of source_vote_pubkey: {{ source_vote_pubkey }}"
      delegate_to: localhost
      run_once: true

    - name: swap - Get vote account data from source validator
      ansible.builtin.command: solana vote-account {{ solana_cluster_param }} {{ source_vote_pubkey }} --output json
      register: source_vote_account_before
      when: inventory_hostname == source_host
      delegate_to: localhost
      changed_when: false
      check_mode: false

    - name: summary - Debug var source_vote_account_before
      ansible.builtin.debug:
        msg: "Value of source_vote_account_before: {{ source_vote_account_before.stdout }}"
      delegate_to: localhost
      run_once: true

    - name: swap - Parse vote account data before swap
      ansible.builtin.set_fact:
        vote_account_before: "{{ source_vote_account_before.stdout | from_json }}"
      when: 
        - inventory_hostname == source_host
        - source_vote_account_before.stdout is defined
        - source_vote_account_before.stdout != ''

    - name: swap - Make vote account data before swap available globally
      ansible.builtin.set_fact:
        vote_account_before: "{{ hostvars[source_host]['vote_account_before'] }}"
      run_once: true
      when:
        - hostvars[source_host]['vote_account_before'] is defined

    - name: swap - Store pre-swap stats
      ansible.builtin.set_fact:
        pre_swap_stats:
          epoch: "{{ vote_account_before.epochVotingHistory[-1] }}"
          credits_earned: "{{ vote_account_before.epochVotingHistory[-1].creditsEarned }}"
          max_possible_credits: >-
            {{
              vote_account_before.epochVotingHistory[-1].slotsInEpoch *
              vote_account_before.epochVotingHistory[-1].maxCreditsPerSlot
            }}
      run_once: true
      when:
        - vote_account_before is defined
        - vote_account_before.epochVotingHistory is defined
        - vote_account_before.epochVotingHistory | length > 0

    - name: swap - Display pre-swap stats
      ansible.builtin.debug:
        msg: |
          ===============================================
          PRE-SWAP STATS
          ===============================================
          {% if pre_swap_stats is defined %}
          Epoch: {{ pre_swap_stats.epoch }}
          Credits Earned: {{ pre_swap_stats.credits_earned }}
          Max Possible Credits: {{ pre_swap_stats.max_possible_credits }}
          {% else %}
          Pre-swap stats could not be retrieved.
          This may be due to network connectivity issues or the validator not being active.
          {% endif %}
          ===============================================
      run_once: true
  when:
    - source_primary_pubkey is defined
    - source_primary_pubkey != ''
    - source_vote_pubkey is defined
    - source_vote_pubkey != ''

- name: swap - Wait for Restart Window and Unstake Source Validator
  block:
    - name: swap - Wait for safe restart window
      ansible.builtin.command: >
        agave-validator --ledger {{ ledger_path }} wait-for-restart-window
        --max-delinquent-stake {{ restart_max_delinquent_stake }} --min-idle-time {{ restart_min_idle_time }}
        --skip-new-snapshot-check --skip-health-check
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == source_host

    - name: swap - Switch to unstaked identity on source
      ansible.builtin.command: agave-validator -l {{ ledger_path }} set-identity {{ source_host_hot_spare_identity_path }}
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == source_host

    - name: swap - Update symlink to unstaked identity
      ansible.builtin.file:
        src: "{{ source_host_hot_spare_identity_path }}"
        dest: "{{ source_host_identity_link_path }}"
        state: link
        force: true
      when: inventory_hostname == source_host

- name: swap - Transfer Tower File from Source to Destination
  block:
    - name: swap - Get tower filename
      check_mode: false
      ansible.builtin.command: solana-keygen pubkey {{ source_host_primary_target_identity_path }}
      register: staked_identity_pubkey_stdout
      environment:
        PATH: "{{ solana_install_dir }}"
      delegate_to: "{{ source_host }}"
      when: inventory_hostname == destination_host

    - name: swap - Save tower filename
      ansible.builtin.set_fact:
        tower_file_src: "{{ ledger_path }}/{{ tower_file_prefix }}{{ staked_identity_pubkey_stdout.stdout }}{{ tower_file_suffix }}"
        tower_file_dest: "{{ ledger_path }}/{{ tower_file_prefix }}{{ staked_identity_pubkey_stdout.stdout }}{{ tower_file_suffix }}"
      when: inventory_hostname == destination_host

    - name: swap - Rsync tower file from source to destination
      ansible.posix.synchronize:
        src: "{{ tower_file_src }}"
        dest: "{{ tower_file_dest }}"
        mode: push
        compress: false
        rsync_opts:
          - "--delete"
      delegate_to: "{{ source_host }}"
      become: false
      ignore_errors: "{{ ansible_check_mode }}"
      when: inventory_hostname == destination_host

- name: swap - Promote Destination to Primary Target Validator
  block:
    - name: swap - Switch to staked identity on destination
      ansible.builtin.command: agave-validator -l {{ ledger_path }} set-identity --require-tower {{ destination_host_primary_target_identity_path }}
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == destination_host

    - name: swap - Update symlink to staked identity
      ansible.builtin.file:
        src: "{{ destination_host_primary_target_identity_path }}"
        dest: "{{ destination_host_identity_link_path }}"
        state: link
        force: true
      when: inventory_hostname == destination_host
