---
- name: swap - Determine Solana cluster parameter
  ansible.builtin.set_fact:
    solana_cluster_param: >-
      {%- if 'solana_mainnet' in group_names -%}
      -um
      {%- elif 'solana_testnet' in group_names -%}
      -ut
      {%- elif 'solana_localnet' in group_names -%}
      -ul
      {%- else -%}
      -ul
      {%- endif -%}
  run_once: true

- name: swap - Debug solana cluster parameter
  ansible.builtin.debug:
    msg: "solana_cluster_param: '{{ solana_cluster_param }}'"
  delegate_to: localhost
  run_once: true

- name: swap - Ensure enough time left in epoch before swap
  block:
    - name: swap - Get current epoch info
      ansible.builtin.shell: solana {{ solana_cluster_param }} epoch-info --output json
      register: epoch_info
      when: solana_cluster_param is defined
      delegate_to: localhost
      changed_when: false
      check_mode: false

    - name: swap - Debug epoch_info
      ansible.builtin.debug:
        msg: "epoch_info: {{ epoch_info.stdout }}"
      delegate_to: localhost
      run_once: true

    - name: swap - Fail if epoch info stdout is empty
      ansible.builtin.fail:
        msg: Epoch info command returned empty output.
      when: epoch_info.stdout is not defined or epoch_info.stdout == ''
      delegate_to: localhost

    - name: swap - Parse epoch info
      ansible.builtin.set_fact:
        epoch_info_json: "{{ epoch_info.stdout | from_json }}"
        slots_in_epoch: "{{ (epoch_info.stdout | from_json).slotsInEpoch | int }}"
        slot_index: "{{ (epoch_info.stdout | from_json).slotIndex | int }}"
      when: 
        - epoch_info.rc == 0
        - epoch_info.stdout is defined
        - epoch_info.stdout != ''

    - name: swap - Calculate seconds remaining in epoch
      ansible.builtin.set_fact:
        slots_remaining: "{{ slots_in_epoch | int - slot_index | int }}"
        seconds_remaining: "{{ (slots_in_epoch | int - slot_index | int) / slots_per_sec }}"
      when: 
        - epoch_info_json is defined
        - slots_in_epoch is defined
        - slot_index is defined

    - name: swap - Debug calculated seconds and slots remaining
      ansible.builtin.debug:
        msg: "seconds_remaining: {{ seconds_remaining }}, slots_remaining: {{ slots_remaining }}"
      when:
        - inventory_hostname == source_host
        - seconds_remaining is defined
        - slots_remaining is defined

- name: swap - Fail if less than 3 minutes remain in epoch
  ansible.builtin.fail:
    msg: |
      Only {{ seconds_remaining | float | int }} seconds remain in the current epoch ({{ slots_remaining }} slots).
      Please wait for the new epoch to start and try again when there are at least 3 minutes left in the epoch.
      It is less effective to calculate TVC loss close to the epoch boundary.
  run_once: true
  when: 
    - seconds_remaining is defined
    - seconds_remaining | float < swap_epoch_end_threshold_sec

- name: swap - Get pre-swap vote account stats
  block:
    - name: summary - Debug var source_primary_pubkey
      ansible.builtin.debug:
        msg: "Value of source_primary_pubkey: {{ source_primary_pubkey }}"
      delegate_to: localhost
      run_once: true

    - name: swap - Get vote account address from validator identity (fallback)
      ansible.builtin.shell: |
        solana {{ solana_cluster_param }} validators --keep-unstaked-delinquents --output json | jq -r '.validators[] | select(.identityPubkey == "{{ source_primary_pubkey }}") | .voteAccountPubkey'
      register: fallback_vote_account_address
      when:
        - (source_vote_pubkey is not defined or source_vote_pubkey == '')
        - source_primary_pubkey is defined
        - source_primary_pubkey != ''
      delegate_to: localhost
      changed_when: false
      check_mode: false

    - name: swap - Set source_vote_pubkey from fallback if needed
      ansible.builtin.set_fact:
        source_vote_pubkey: "{{ fallback_vote_account_address.stdout }}"
      when:
        - (source_vote_pubkey is not defined or source_vote_pubkey == '')
        - fallback_vote_account_address is defined
        - fallback_vote_account_address.stdout is defined
        - fallback_vote_account_address.stdout != ''
      run_once: true

    - name: summary - Debug var source_vote_pubkey
      ansible.builtin.debug:
        msg: "Value of source_vote_pubkey: {{ source_vote_pubkey }}"
      delegate_to: localhost
      run_once: true

    - name: swap - Get vote account data from source validator
      ansible.builtin.command: solana vote-account {{ solana_cluster_param }} {{ source_vote_pubkey }} --output json
      register: source_vote_account_before
      when: inventory_hostname == source_host
      delegate_to: localhost
      changed_when: false
      check_mode: false

    - name: swap - Parse vote account data before swap
      ansible.builtin.set_fact:
        vote_account_before: "{{ source_vote_account_before.stdout | from_json }}"
      when: 
        - inventory_hostname == source_host
        - source_vote_account_before.stdout is defined
        - source_vote_account_before.stdout != ''

    - name: swap - Make vote account data before swap available globally
      ansible.builtin.set_fact:
        vote_account_before: "{{ vote_account_before }}"
      run_once: true
      when:
        - vote_account_before is defined

    - name: swap - Store pre-swap stats
      ansible.builtin.set_fact:
        pre_swap_stats:
          epoch: "{{ vote_account_before.epochVotingHistory[-1] }}"
          credits_earned: "{{ vote_account_before.epochVotingHistory[-1].creditsEarned }}"
          max_possible_credits: >-
            {{
              vote_account_before.epochVotingHistory[-1].slotsInEpoch *
              vote_account_before.epochVotingHistory[-1].maxCreditsPerSlot
            }}
      run_once: true
      when:
        - vote_account_before is defined
        - vote_account_before.epochVotingHistory is defined
        - vote_account_before.epochVotingHistory | length > 0

    - name: swap - Display pre-swap stats
      ansible.builtin.debug:
        msg: |
          ===============================================
          PRE-SWAP STATS
          ===============================================
          {% if pre_swap_stats is defined %}
          Epoch: {{ pre_swap_stats.epoch }}
          Credits Earned: {{ pre_swap_stats.credits_earned }}
          Max Possible Credits: {{ pre_swap_stats.max_possible_credits }}
          {% else %}
          Pre-swap stats could not be retrieved.
          This may be due to network connectivity issues or the validator not being active.
          {% endif %}
          ===============================================
      run_once: true
  when:
    - source_primary_pubkey is defined
    - source_primary_pubkey != ''

- name: swap - Wait for Restart Window and Unstake Source Validator
  block:
    - name: swap - Wait for safe restart window
      ansible.builtin.command: >
        agave-validator --ledger {{ ledger_path }} wait-for-restart-window
        --max-delinquent-stake {{ restart_max_delinquent_stake }} --min-idle-time {{ restart_min_idle_time }}
        --skip-new-snapshot-check --skip-health-check
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == source_host
      register: wait_restart_result
      failed_when: wait_restart_result.rc != 0

    - name: swap - Switch to unstaked identity on source
      ansible.builtin.command: agave-validator -l {{ ledger_path }} set-identity {{ source_host_hot_spare_identity_path }}
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == source_host

    - name: swap - Update symlink to unstaked identity
      ansible.builtin.file:
        src: "{{ source_host_hot_spare_identity_path }}"
        dest: "{{ source_host_identity_link_path }}"
        state: link
        force: true
      when: inventory_hostname == source_host
      register: wait_and_unstake_result

    - name: set fact if Restart Window and Unstake Source succeeded
      ansible.builtin.set_fact:
        wait_and_unstake_success: true
      when: wait_and_unstake_result is not failed

- name: swap - Transfer Tower File from Source to Destination
  block:
    - name: swap - Get tower filename
      check_mode: false
      ansible.builtin.command: solana-keygen pubkey {{ source_host_primary_target_identity_path }}
      register: staked_identity_pubkey_stdout
      environment:
        PATH: "{{ solana_install_dir }}"
      delegate_to: "{{ source_host }}"
      when: inventory_hostname == destination_host

    - name: swap - Save tower filename
      ansible.builtin.set_fact:
        tower_file_src: "{{ ledger_path }}/{{ tower_file_prefix }}{{ staked_identity_pubkey_stdout.stdout }}{{ tower_file_suffix }}"
        tower_file_dest: "{{ ledger_path }}/{{ tower_file_prefix }}{{ staked_identity_pubkey_stdout.stdout }}{{ tower_file_suffix }}"
      when: inventory_hostname == destination_host

    - name: swap - Rsync tower file from source to destination
      ansible.posix.synchronize:
        src: "{{ tower_file_src }}"
        dest: "{{ tower_file_dest }}"
        mode: push
        compress: false
        rsync_opts:
          - "--delete"
      delegate_to: "{{ source_host }}"
      become: false
      ignore_errors: "{{ ansible_check_mode }}"
      when: inventory_hostname == destination_host
      register: transfer_tower_result

    - name: set fact if tower transfer succeeded
      ansible.builtin.set_fact:
        tower_transfer_success: true
      when: transfer_tower_result is not failed
  when: wait_and_unstake_success | default(false)

- name: swap - Promote Destination to Primary Target Validator
  block:
    - name: swap - Switch to staked identity on destination
      ansible.builtin.command: agave-validator -l {{ ledger_path }} set-identity --require-tower {{ destination_host_primary_target_identity_path }}
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == destination_host

    - name: swap - Update symlink to staked identity
      ansible.builtin.file:
        src: "{{ destination_host_primary_target_identity_path }}"
        dest: "{{ destination_host_identity_link_path }}"
        state: link
        force: true
      when: inventory_hostname == destination_host
  when: tower_transfer_success | default(false)
