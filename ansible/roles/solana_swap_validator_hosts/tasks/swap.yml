---
- name: swap - Get pre-swap vote account stats
  block:
    - name: summary - Debug var source_primary_pubkey
      ansible.builtin.debug:
        msg: "Value of source_primary_pubkey: {{ source_primary_pubkey }}"
      delegate_to: localhost
      run_once: true

    - name: swap - Get vote account address from validator identity (fallback)
      ansible.builtin.shell: |
        solana {{ solana_cluster_param }} validators --keep-unstaked-delinquents --output json | jq -r '.validators[] | select(.identityPubkey == "{{ source_primary_pubkey }}") | .voteAccountPubkey'
      register: fallback_vote_account_address
      when:
        - (source_vote_pubkey is not defined or source_vote_pubkey == '')
        - source_primary_pubkey is defined
        - source_primary_pubkey != ''
      delegate_to: localhost
      changed_when: false
      check_mode: false
      retries: "{{ max_retry_attempts }}"
      delay: "{{ retry_delay_seconds }}"
      until: fallback_vote_account_address.rc == 0

    - name: swap - Set source_vote_pubkey from fallback if needed
      ansible.builtin.set_fact:
        source_vote_pubkey: "{{ fallback_vote_account_address.stdout }}"
      when:
        - (source_vote_pubkey is not defined or source_vote_pubkey == '')
        - fallback_vote_account_address is defined
        - fallback_vote_account_address.stdout is defined
        - fallback_vote_account_address.stdout != ''
      run_once: true

    - name: summary - Debug var source_vote_pubkey
      ansible.builtin.debug:
        msg: "Value of source_vote_pubkey: {{ source_vote_pubkey }}"
      delegate_to: localhost
      run_once: true

    - name: swap - Get vote account data from source validator
      ansible.builtin.command: solana vote-account {{ solana_cluster_param }} {{ source_vote_pubkey }} --output json
      register: source_vote_account_before
      when: inventory_hostname == source_host
      delegate_to: localhost
      changed_when: false
      check_mode: false
      retries: "{{ max_retry_attempts }}"
      delay: "{{ retry_delay_seconds }}"
      until: source_vote_account_before.rc == 0

    - name: swap - Parse vote account data before swap
      ansible.builtin.set_fact:
        vote_account_before: "{{ source_vote_account_before.stdout | from_json }}"
      when:
        - inventory_hostname == source_host
        - source_vote_account_before.stdout is defined
        - source_vote_account_before.stdout != ''

    - name: swap - Make vote account data before swap available globally
      ansible.builtin.set_fact:
        vote_account_before: "{{ vote_account_before }}"
      run_once: true
      when:
        - vote_account_before is defined

    - name: swap - Store pre-swap stats
      ansible.builtin.set_fact:
        pre_swap_stats:
          epoch: "{{ vote_account_before.epochVotingHistory[-1] }}"
          credits_earned: "{{ vote_account_before.epochVotingHistory[-1].creditsEarned }}"
          max_possible_credits: >-
            {{
              vote_account_before.epochVotingHistory[-1].slotsInEpoch *
              vote_account_before.epochVotingHistory[-1].maxCreditsPerSlot
            }}
      run_once: true
      when:
        - vote_account_before is defined
        - vote_account_before.epochVotingHistory is defined
        - vote_account_before.epochVotingHistory | length > 0

    - name: swap - Display pre-swap stats
      ansible.builtin.debug:
        msg: |
          ===============================================
          PRE-SWAP STATS
          ===============================================
          {% if pre_swap_stats is defined %}
          Epoch: {{ pre_swap_stats.epoch }}
          Credits Earned: {{ pre_swap_stats.credits_earned }}
          Max Possible Credits: {{ pre_swap_stats.max_possible_credits }}
          {% else %}
          Pre-swap stats could not be retrieved.
          This may be due to network connectivity issues or the validator not being active.
          {% endif %}
          ===============================================
      run_once: true
  when:
    - source_primary_pubkey is defined
    - source_primary_pubkey != ''

- name: swap - Wait for Restart Window and Unstake Source Validator
  block:
    - name: swap - Wait for safe restart window with timeout
      ansible.builtin.command: >
        agave-validator --ledger {{ ledger_path }} wait-for-restart-window
        --max-delinquent-stake {{ restart_max_delinquent_stake }} --min-idle-time {{ restart_min_idle_time }}
        --skip-new-snapshot-check --skip-health-check
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == source_host
      async: "{{ wait_restart_window_timeout_seconds }}"
      poll: 0
      register: wait_restart_job

    - name: swap - Check wait-for-restart-window job status
      ansible.builtin.async_status:
        jid: "{{ wait_restart_job.ansible_job_id }}"
      when:
        - inventory_hostname == source_host
        - wait_restart_job.ansible_job_id is defined
      register: wait_restart_result
      until: wait_restart_result.finished
      retries: "{{ (wait_restart_window_timeout_seconds / 10) | int }}"
      delay: 10
      failed_when: wait_restart_result.failed or (wait_restart_result.msg is defined and 'timeout' in wait_restart_result.msg | lower)

    - name: swap - Handle wait-for-restart-window timeout
      ansible.builtin.fail:
        msg: "Wait-for-restart-window job timed out after {{ wait_restart_window_timeout_seconds }} seconds. Check validator status and cluster health."
      when:
        - inventory_hostname == source_host
        - wait_restart_result is defined
        - wait_restart_result.msg is defined
        - "'timeout' in wait_restart_result.msg | lower"

    - name: swap - Switch to hot-spare identity on source
      ansible.builtin.command: agave-validator -l {{ ledger_path }} set-identity {{ source_host_hot_spare_identity_path }}
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == source_host
      async: "{{ wait_restart_window_timeout_seconds }}"
      poll: 0
      register: set_hot_spare_identity_job

    - name: swap - Check set-hot-spare-identity job status
      ansible.builtin.async_status:
        jid: "{{ set_hot_spare_identity_job.ansible_job_id }}"
      when:
        - inventory_hostname == source_host
        - set_hot_spare_identity_job.ansible_job_id is defined
      register: set_hot_spare_identity_result
      until: set_hot_spare_identity_result.finished
      retries: "{{ (wait_restart_window_timeout_seconds / 10) | int }}"
      delay: 10
      failed_when: set_hot_spare_identity_result.failed or (set_hot_spare_identity_result.msg is defined and 'timeout' in set_hot_spare_identity_result.msg | lower)

    - name: swap - Handle set-hot-spare-identity timeout
      ansible.builtin.fail:
        msg: "Set-hot-spare-identity job timed out after {{ wait_restart_window_timeout_seconds }} seconds. Check validator process status."
      when:
        - inventory_hostname == source_host
        - set_hot_spare_identity_result is defined
        - set_hot_spare_identity_result.msg is defined
        - "'timeout' in set_hot_spare_identity_result.msg | lower"

    - name: swap - Update symlink to hot-spare identity
      ansible.builtin.file:
        src: "{{ source_host_hot_spare_identity_path }}"
        dest: "{{ source_host_identity_link_path }}"
        state: link
        force: true
      when: inventory_hostname == source_host
      register: wait_and_unstake_step_result

    - name: set fact if Restart Window and Unstake Source succeeded
      ansible.builtin.set_fact:
        wait_and_unstake_success: true
      when: wait_and_unstake_step_result is not failed

- name: swap - Transfer Tower File from Source to Destination
  block:
    - name: swap - Get tower filename
      check_mode: false
      ansible.builtin.command: solana-keygen pubkey {{ source_host_primary_target_identity_path }}
      register: primary_target_identity_pubkey_stdout
      environment:
        PATH: "{{ solana_install_dir }}"
      delegate_to: "{{ source_host }}"
      when: inventory_hostname == destination_host
      retries: "{{ max_retry_attempts }}"
      delay: "{{ retry_delay_seconds }}"
      until: primary_target_identity_pubkey_stdout.rc == 0

    - name: swap - Save tower filename
      ansible.builtin.set_fact:
        tower_file_src: "{{ ledger_path }}/{{ tower_file_prefix }}{{ primary_target_identity_pubkey_stdout.stdout }}{{ tower_file_suffix }}"
        tower_file_dest: "{{ ledger_path }}/{{ tower_file_prefix }}{{ primary_target_identity_pubkey_stdout.stdout }}{{ tower_file_suffix }}"
      when: inventory_hostname == destination_host

    - name: swap - Rsync tower file from source to destination
      ansible.posix.synchronize:
        src: "{{ tower_file_src }}"
        dest: "{{ tower_file_dest }}"
        mode: push
        compress: false
        rsync_opts:
          - "--delete"
      delegate_to: "{{ source_host }}"
      become: false
      ignore_errors: "{{ ansible_check_mode }}"
      when: inventory_hostname == destination_host
      register: transfer_tower_result
      retries: "{{ max_retry_attempts }}"
      delay: "{{ retry_delay_seconds }}"

    - name: swap - Handle tower transfer failure
      block:
        - name: swap - Restore primary identity symlink on source
          ansible.builtin.file:
            src: "{{ source_host_primary_target_identity_path }}"
            dest: "{{ source_host_identity_link_path }}"
            state: link
            force: true
          when: inventory_hostname == source_host

        - name: swap - Restore primary identity on source
          ansible.builtin.command: agave-validator -l {{ ledger_path }} set-identity {{ source_host_primary_target_identity_path }}
          environment:
            PATH: "{{ solana_install_dir }}"
          when: inventory_hostname == source_host
          async: "{{ wait_restart_window_timeout_seconds }}"
          poll: 0
          register: restore_identity_job

        - name: swap - Check restore-identity job status
          ansible.builtin.async_status:
            jid: "{{ restore_identity_job.ansible_job_id }}"
          when:
            - inventory_hostname == source_host
            - restore_identity_job.ansible_job_id is defined
          register: restore_identity_result
          until: restore_identity_result.finished
          retries: "{{ (wait_restart_window_timeout_seconds / 10) | int }}"
          delay: 10
          failed_when: restore_identity_result.failed

        - name: swap - Fail with recovery message
          ansible.builtin.fail:
            msg: "Tower file transfer failed after {{ max_retry_attempts }} attempts. Primary identity restored on source host."
      when:
        - not ansible_check_mode
        - transfer_tower_result is failed

    - name: set fact if tower transfer succeeded
      ansible.builtin.set_fact:
        tower_transfer_success: true
      when: transfer_tower_result is not failed
  when: wait_and_unstake_success | default(false)

- name: swap - Promote Destination to Primary Target Validator
  block:
    - name: swap - Switch to primary target identity on destination
      ansible.builtin.command: agave-validator -l {{ ledger_path }} set-identity --require-tower {{ destination_host_primary_target_identity_path }}
      environment:
        PATH: "{{ solana_install_dir }}"
      when: inventory_hostname == destination_host
      async: "{{ wait_restart_window_timeout_seconds }}"
      poll: 0
      register: set_identity_job

    - name: swap - Check set-identity job status
      ansible.builtin.async_status:
        jid: "{{ set_identity_job.ansible_job_id }}"
      when:
        - inventory_hostname == destination_host
        - set_identity_job.ansible_job_id is defined
      register: set_identity_result
      until: set_identity_result.finished
      retries: "{{ (wait_restart_window_timeout_seconds / 10) | int }}"
      delay: 10
      failed_when: set_identity_result.failed

    - name: swap - Handle set-identity failure
      block:
        - name: swap - Restore primary identity symlink on source
          ansible.builtin.file:
            src: "{{ source_host_primary_target_identity_path }}"
            dest: "{{ source_host_identity_link_path }}"
            state: link
            force: true
          when: inventory_hostname == source_host

        - name: swap - Restore primary identity on source
          ansible.builtin.command: agave-validator -l {{ ledger_path }} set-identity {{ source_host_primary_target_identity_path }}
          environment:
            PATH: "{{ solana_install_dir }}"
          when: inventory_hostname == source_host
          async: "{{ wait_restart_window_timeout_seconds }}"
          poll: 0
          register: restore_identity_job

        - name: swap - Check restore-identity job status
          ansible.builtin.async_status:
            jid: "{{ restore_identity_job.ansible_job_id }}"
          when:
            - inventory_hostname == source_host
            - restore_identity_job.ansible_job_id is defined
          register: restore_identity_result
          until: restore_identity_result.finished
          retries: "{{ (wait_restart_window_timeout_seconds / 10) | int }}"
          delay: 10
          failed_when: restore_identity_result.failed

        - name: swap - Fail with recovery message
          ansible.builtin.fail:
            msg: "Failed to switch destination validator to primary target identity. This usually means the validator process is not running or not accepting connections. Primary identity restored on source host."
      when:
        - not ansible_check_mode
        - set_identity_result is failed

    - name: swap - Update symlink to primary target identity
      ansible.builtin.file:
        src: "{{ destination_host_primary_target_identity_path }}"
        dest: "{{ destination_host_identity_link_path }}"
        state: link
        force: true
      when:
        - inventory_hostname == destination_host
        - set_identity_result is not failed
  when: tower_transfer_success | default(false)

- name: swap - Stop jito-relayer on source host if running
  block:
    - name: swap - Check jito-relayer service status
      ansible.builtin.systemd:
        name: "{{ jito_relayer_service_name }}"
      register: relayer_service_status
      when: inventory_hostname == source_host
      changed_when: false
      failed_when: false

    - name: swap - Stop and disable jito-relayer service
      ansible.builtin.systemd:
        name: "{{ jito_relayer_service_name }}"
        state: stopped
        enabled: false
      register: relayer_stop_result
      retries: 3
      delay: 10
      until: relayer_stop_result is success
      when:
        - inventory_hostname == source_host
        - relayer_service_status.status.ActiveState == "active"
      become: true

    - name: swap - Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: true
      when: inventory_hostname == source_host
      become: true
