---
- name: configure - Set validator_keyset_name default if not defined
  ansible.builtin.set_fact:
    validator_keyset_name: "{{ validator_name }}"
  when: validator_keyset_name is not defined

- name: configure - Install validator keyset using shared task
  ansible.builtin.import_tasks: ../../solana_validator_shared/tasks/install_validator_keyset.yml

- name: configure - Set validator script path
  ansible.builtin.set_fact:
    validator_script_path: "{{ validator_scripts_dir }}/run-{{ validator_name }}.sh"

- name: configure - Configure validator startup script
  block:
    - name: configure - Get vote account pubkey
      block:
        - name: configure - Get vote account public key
          ansible.builtin.command: solana-keygen pubkey {{ ansible_home_dir }}/.validator-keys/{{ validator_name }}/vote-account.json
          register: vote_account_cmd
          delegate_to: localhost

        - name: configure - Set vote account public key
          ansible.builtin.set_fact:
            vote_account_pubkey: "{{ vote_account_cmd.stdout }}"

    - name: configure - Get localnet genesis hash
      block:
        - name: configure - Get genesis hash
          ansible.builtin.command: solana -ul genesis-hash
          register: cluster_genesis_hash
          delegate_to: localhost

        - name: configure - Set expected genesis hash
          ansible.builtin.set_fact:
            expected_genesis_hash: "{{ cluster_genesis_hash.stdout }}"

        - name: configure - Get entrypoint identity pubkey
          ansible.builtin.shell: solana -ul validators --keep-unstaked-delinquents --output json | jq -r ".validators | .[0].identityPubkey"
          register: entrypoint_identity_cmd
          delegate_to: localhost

        - name: configure - Add entrypoint to known validators
          ansible.builtin.set_fact:
            known_validators: "{{ known_validators + [entrypoint_identity_cmd.stdout] }}"
      when: solana_cluster == "localnet"

    - name: configure - Create validator startup script
      ansible.builtin.template:
        src: validator.startup.j2
        dest: "{{ validator_script_path }}"
        owner: "root"
        group: "{{ validator_operators_group }}"
        mode: "{{ validator_scripts_file_mode }}"
      become: true

    - name: configure - Copy fix_core_affinity_bug_for_poh.sh script to remote
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../scripts/fix_core_afinity_bug_for_poh.sh"
        dest: "{{ validator_scripts_dir }}"
        mode: "{{ validator_scripts_file_mode }}"
        owner: "root"
        group: "{{ validator_operators_group }}"
      ignore_errors: "{{ ansible_check_mode }}"
      become: true

    - name: configure - Copy schedule_set_hot_spare_identity.sh script to remote
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../scripts/schedule_set_hot_spare_identity.sh"
        dest: "{{ validator_scripts_dir }}"
        mode: "{{ validator_scripts_file_mode }}"
        owner: "root"
        group: "{{ validator_operators_group }}"
      ignore_errors: "{{ ansible_check_mode }}"
      become: true
  rescue:
    - name: configure - Fail with error message
      ansible.builtin.fail:
        msg: "Failed to configure validator startup script. Error: {{ ansible_failed_result }}"

- name: configure - Configure validator log rotation
  block:
    - name: configure - Create logrotate configuration
      ansible.builtin.template:
        src: validator.logrotate.j2
        dest: "/etc/logrotate.d/{{ validator_service_name }}"
        mode: "0644"

    - name: configure - Verify logrotate configuration
      ansible.builtin.command: logrotate -d /etc/logrotate.d/{{ validator_service_name }}
      register: logrotate_check
      changed_when: false
      failed_when: false
  become: true
  rescue:
    - name: configure - Fail with error message
      ansible.builtin.fail:
        msg: "Failed to configure validator log rotation. Error: {{ ansible_failed_result }}"

- name: configure - Set up validator logrotate systemd timer (localnet only)
  block:
    - name: configure - Deploy validator logrotate systemd service
      ansible.builtin.template:
        src: validator-logrotate.service.j2
        dest: "/etc/systemd/system/validator-logrotate-{{ validator_service_name }}.service"
        mode: "0644"

    - name: configure - Deploy validator logrotate systemd timer
      ansible.builtin.template:
        src: validator-logrotate.timer.j2
        dest: "/etc/systemd/system/validator-logrotate-{{ validator_service_name }}.timer"
        mode: "0644"

    - name: configure - Reload systemd to pick up new timer
      ansible.builtin.systemd:
        daemon_reload: true

    - name: configure - Enable and start validator logrotate timer
      ansible.builtin.systemd:
        name: "validator-logrotate-{{ validator_service_name }}.timer"
        enabled: true
        state: started
  when: solana_cluster == 'localnet'
  become: true

- name: configure - Configure validator systemd service
  block:
    - name: configure - Create validator systemd service
      ansible.builtin.template:
        src: validator.service.j2
        dest: "/etc/systemd/system/{{ validator_service_name }}.service"
        mode: "0644"

    - name: configure - Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: true

    - name: configure - Enable validator service
      ansible.builtin.systemd:
        name: "{{ validator_service_name }}"
        enabled: true
        state: started
  become: true
  rescue:
    - name: configure - Fail with error message
      ansible.builtin.fail:
        msg: "Failed to configure validator systemd service. Error: {{ ansible_failed_result }}"

- name: configure - Configuration complete
  ansible.builtin.debug:
    msg: "Agave validator configuration completed successfully"
