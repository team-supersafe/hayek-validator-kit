---
- name: Configure validator startup script
  block:
    - name: Ensure scripts_dir exists
      ansible.builtin.file:
        path: "{{ scripts_dir }}"
        state: directory
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
        mode: "0754"

    - name: Set validator script path
      ansible.builtin.set_fact:
        validator_script_path: "{{ scripts_dir }}/run-{{ validator_name }}.sh"

    # Get vote account pubkey
    - name: Get vote account public key
      ansible.builtin.command: solana address -k {{ ansible_keys_dir }}/vote-account.json
      register: vote_account_cmd
      delegate_to: localhost

    - name: Set vote account public key
      ansible.builtin.set_fact:
        vote_account_pubkey: "{{ vote_account_cmd.stdout }}"

    # Get genesis hash for localnet
    - name: Get localnet genesis hash
      block:
        - name: Get genesis hash
          ansible.builtin.command: solana -ul genesis-hash
          register: cluster_genesis_hash
          delegate_to: localhost

        - name: Set expected genesis hash
          ansible.builtin.set_fact:
            expected_genesis_hash: "{{ cluster_genesis_hash.stdout }}"

        - name: Get entrypoint identity pubkey
          ansible.builtin.shell: solana -ul validators --keep-unstaked-delinquents --output json | jq -r ".validators | .[0].identityPubkey"
          register: entrypoint_identity_cmd
          delegate_to: localhost

        - name: Add entrypoint to known validators
          ansible.builtin.set_fact:
            known_validators: "{{ known_validators + [entrypoint_identity_cmd.stdout] }}"
      when: solana_cluster == "localnet"

    # Create the validator startup script from template
    - name: Create validator startup script
      ansible.builtin.template:
        src: validator.startup.j2
        dest: "{{ validator_script_path }}"
        mode: "0755"
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"

    - name: Copy fix_core_afinity_bug_for_poh.sh script to remote
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../scripts/fix_core_afinity_bug_for_poh.sh"
        dest: "{{ scripts_dir }}"
        mode: "0755"
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
      ignore_errors: "{{ ansible_check_mode }}" # can be also: when: not ansible_check_mode

    - name: Copy schedule_set_hot_spare_identity.sh script to remote
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../scripts/schedule_set_hot_spare_identity.sh"
        dest: "{{ scripts_dir }}"
        mode: "0755"
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
      ignore_errors: "{{ ansible_check_mode }}"

  rescue:
    - name: Fail with error message
      ansible.builtin.fail:
        msg: "Failed to configure validator startup script. Error: {{ ansible_failed_result }}"
