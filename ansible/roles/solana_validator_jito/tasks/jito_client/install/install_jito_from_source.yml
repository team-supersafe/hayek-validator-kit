---
- name: Set Jito tag
  ansible.builtin.set_fact:
    jito_tag: "v{{ jito_version }}-jito"

- name: Prepare build environment
  block:
    - name: Create solana releases directory
      ansible.builtin.file:
        path: "{{ solana_installed_releases_dir }}/{{ jito_tag }}"
        state: directory
        mode: "0755"
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"

    - name: Ensure build directory exists
      ansible.builtin.file:
        path: "{{ build_dir }}"
        state: directory
        mode: "0755"
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"

    - name: Ensure git is installed
      become: true
      ansible.builtin.package:
        name: git
        state: present
  rescue:
    - name: Fail with error message
      ansible.builtin.fail:
        msg: "Failed to prepare build environment. Error: {{ ansible_failed_result }}"

- name: Clone and build Jito-Solana
  block:
    - name: Clone/Pull jito-solana repository with submodules
      ansible.builtin.git:
        repo: "{{ jito_repo_url }}"
        dest: "{{ jito_repo_dest }}"
        version: "tags/{{ jito_tag }}"
        recursive: true
        update: true

    - name: Get the latest commit hash
      ansible.builtin.command: git rev-parse HEAD
      args:
        chdir: "{{ jito_repo_dest }}"
      register: ci_commit
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Build Jito-Solana CLI
      ansible.builtin.shell: |
        set -e
        . $HOME/.cargo/env
        scripts/cargo-install-all.sh --validator-only {{ solana_installed_releases_dir }}/{{ jito_tag }}
      environment:
        CI_COMMIT: "{{ ci_commit.stdout }}"
      args:
        chdir: "{{ jito_repo_dest }}"
        creates: "{{ solana_installed_releases_dir }}/{{ jito_tag }}/bin/agave-validator"
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Create symlink to new release
      ansible.builtin.file:
        src: "{{ solana_installed_releases_dir }}/{{ jito_tag }}"
        dest: "{{ solana_user_dir }}/.local/share/solana/install/active_release"
        owner: "{{ solana_user }}"
        group: "{{ solana_user }}"
        state: link
        force: true
  rescue:
    - name: Fail with error message
      ansible.builtin.fail:
        msg: "Failed to build Jito-Solana from source. Error: {{ ansible_failed_result }}"

- name: Verify build
  block:
    - name: Get installed Jito-Solana CLI version
      ansible.builtin.shell: solana --version
      register: jito_cli_version
      environment:
        PATH: "{{ solana_install_dir }}"

    - name: Fail if Jito-Solana CLI version is not as expected
      ansible.builtin.fail:
        msg: "Jito-Solana CLI version is not as expected. Expected: {{ jito_version }}, Found: {{ jito_cli_version.stdout }}"
      when: jito_cli_version.stdout is not regex("solana-cli .* \(src:.*; feat:.*, client:JitoLabs\)")
      changed_when: false
      ignore_errors: "{{ ansible_check_mode }}"
  rescue:
    - name: Fail with error message
      ansible.builtin.fail:
        msg: "Failed to verify Jito-Solana build. Error: {{ ansible_failed_result }}"
