---
- name: jito_relayer_cohosted - build_from_source - Create Jito Relayer build
  ansible.builtin.debug:
    msg: "Creating Jito Relayer build"

- name: jito_relayer_cohosted - build_from_source - Set local variable for jito_relayer_build_dir
  ansible.builtin.set_fact:
    jito_relayer_build_dir: "{{ build_dir }}/jito_relayer"

- name: jito_relayer_cohosted - build_from_source - Remove build directory if exists
  become: true
  ansible.builtin.file:
    path: "{{ jito_relayer_build_dir }}"
    state: absent

- name: jito_relayer_cohosted - build_from_source - Ensure jito_relayer_build_dir directory exists
  ansible.builtin.file:
    path: "{{ jito_relayer_build_dir }}"
    state: directory
    mode: "0755"

- name: jito_relayer_cohosted - build_from_source - Require git
  become: true
  ansible.builtin.package:
    name: git
    state: present

- name: jito_relayer_cohosted - build_from_source - Clone jito-relayer repository
  ansible.builtin.git:
    repo: https://github.com/jito-foundation/jito-relayer.git
    dest: "{{ jito_relayer_build_dir }}"
    version: "master"
    recursive: true
    update: true

- name: jito_relayer_cohosted - build_from_source - Update git submodules
  ansible.builtin.shell: |
    git submodule update -i -r
  args:
    chdir: "{{ jito_relayer_build_dir }}"

- name: jito_relayer_cohosted - build_from_source - Checkout Jito Relayer version
  ansible.builtin.shell: |
    git checkout tags/v{{ jito_relayer_version }}
  args:
    chdir: "{{ jito_relayer_build_dir }}"

- name: jito_relayer_cohosted - build_from_source - Verify git status after checkout
  ansible.builtin.shell: |
    git status
  args:
    chdir: "{{ jito_relayer_build_dir }}"

- name: jito_relayer_cohosted - build_from_source - Find out if file jito-transaction-relayer exists
  ansible.builtin.stat:
    path: "{{ jito_relayer_build_dir }}/target/release/jito-transaction-relayer"
  register: build_target_stat

- name: jito_relayer_cohosted - build_from_source - Show build status message
  ansible.builtin.debug:
    msg: >-
      {% if build_target_stat.stat.exists %}
      Skipping build: existing Jito Relayer build found at {{ jito_relayer_build_dir }}/target/release.
      {% else %}
      Starting build process for Jito Relayer
      {% endif %}

- block:
    - name: jito_relayer_cohosted - build_from_source - Build Jito Relayer
      ansible.builtin.shell: |
        set -e
        . $HOME/.cargo/env
        cargo b --release > {{ jito_relayer_build_dir }}/build.log 2>&1
      args:
        chdir: "{{ jito_relayer_build_dir }}"

    - name: jito_relayer_cohosted - build_from_source - Jito Relayer build completed
      ansible.builtin.debug:
        msg: "Jito Relayer build completed. Build directory: {{ jito_relayer_build_dir }}"
  when: not build_target_stat.stat.exists

# Activate build

- name: jito_relayer_cohosted - build_from_source - Remove existing release directory if present
  ansible.builtin.file:
    path: "{{ jito_relayer_installed_releases_dir }}/v{{ jito_relayer_version }}"
    state: absent

- name: jito_relayer_cohosted - build_from_source - Create a release directory for the new target
  ansible.builtin.file:
    path: "{{ jito_relayer_installed_releases_dir }}/v{{ jito_relayer_version }}"
    state: directory
    mode: "0755"

- name: jito_relayer_cohosted - build_from_source - Copy built binaries to release directory
  ansible.builtin.copy:
    src: "{{ jito_relayer_build_dir }}/target/release/"
    dest: "{{ jito_relayer_installed_releases_dir }}/v{{ jito_relayer_version }}/"
    remote_src: yes
    mode: "0755"

- name: jito_relayer_cohosted - build_from_source - Update active release symlink
  ansible.builtin.file:
    src: "{{ jito_relayer_installed_releases_dir }}/v{{ jito_relayer_version }}"
    dest: "{{ jito_relayer_install_dir }}"
    state: link
    force: true

- block:
  - name: jito_relayer_cohosted - build_from_source - Ensure active release path is in .bashrc
    ansible.builtin.lineinfile:
      path: "$HOME/.bashrc"
      line: 'export PATH="{{ jito_relayer_install_dir }}:$PATH"'
      create: yes
      state: present

  - name: jito_relayer_cohosted - build_from_source - Ensure active release path is in .zshrc
    ansible.builtin.lineinfile:
      path: "$HOME/.zshrc"
      line: 'export PATH="{{ jito_relayer_install_dir }}:$PATH"'
      create: yes
      state: present

- name: jito_relayer_cohosted - build_from_source - Save updated PATH for checking
  ansible.builtin.shell: |
    . "$HOME/.zshrc"
    . "$HOME/.bashrc"
    echo $PATH
  register: updated_path
  changed_when: false

- name: Show modified PATH
  debug:
    msg: "PATH after sourcing: {{ updated_path.stdout }}"

- name: jito_relayer_cohosted - buold_from_source - Verify jito-transaction-relayer installation
  ansible.builtin.shell: jito-transaction-relayer --version
  environment:
    PATH: "{{ updated_path.stdout }}"
  register: installed_version

- name: jito_relayer_cohosted - buold_from_source - Extract installed version number
  ansible.builtin.set_fact:
    installed_relayer_version: "{{ installed_version.stdout | regex_search('jito-transaction-relayer ([0-9.]+)', '\\1') | first }}"
  when: installed_version.stdout is defined

- name: jito_relayer_cohosted - build_from_source - Debug installed_relayer_version
  ansible.builtin.debug:
    msg: "installed_relayer_version: {{ installed_relayer_version }}"

- name: jito_relayer_cohosted - build_from_source - Fail if installed Jito relayer version is not {{ jito_relayer_version }}
  ansible.builtin.fail:
    msg: "Jito relayer version not satisfied -> installed: {{ installed_relayer_version }}, required: {{ jito_relayer_version }}"
  when: not installed_relayer_version is defined or installed_relayer_version != jito_relayer_version
  tags: [jito_relayer.verify]
